{"version":3,"sources":["webpack://apprun/webpack/universalModuleDefinition","webpack://apprun/webpack/bootstrap","webpack://apprun/webpack/runtime/global","webpack://apprun/webpack/runtime/make namespace object","webpack://apprun/./src/app.ts","webpack://apprun/./node_modules/lit-html/lib/directive.js","webpack://apprun/./node_modules/lit-html/lib/dom.js","webpack://apprun/./node_modules/lit-html/lib/part.js","webpack://apprun/./node_modules/lit-html/lib/template.js","webpack://apprun/./node_modules/lit-html/lib/template-instance.js","webpack://apprun/./node_modules/lit-html/lib/template-result.js","webpack://apprun/./node_modules/lit-html/lib/parts.js","webpack://apprun/./src/vdom-to-html.tsx","webpack://apprun/./node_modules/lit-html/lib/default-template-processor.js","webpack://apprun/./node_modules/lit-html/lib/template-factory.js","webpack://apprun/./node_modules/lit-html/lib/render.js","webpack://apprun/./node_modules/lit-html/lit-html.js","webpack://apprun/./src/apprun-dev-tools-tests.tsx","webpack://apprun/./src/apprun-dev-tools.tsx"],"names":["root","factory","exports","module","define","amd","this","__webpack_require__","g","globalThis","Function","e","window","r","Symbol","toStringTag","Object","defineProperty","value","self","global","_events","name","fn","options","push","subscribers","filter","sub","args","getSubscribers","console","assert","length","forEach","delay","keys","apply","once","on","_t","clearTimeout","setTimeout","promises","map","Promise","all","events","evt","endsWith","startsWith","replace","sort","a","b","event","directives","WeakMap","isDirective","o","has","isCEPolyfill","customElements","undefined","polyfillWrapFlushCallback","noChange","nothing","String","Math","random","slice","nodeMarker","boundAttributeSuffix","RegExp","isTemplatePartActive","part","index","createMarker","document","createComment","lastAttributeNameRegex","TemplateInstance","template","processor","__parts","values","i","setValue","commit","fragment","element","content","cloneNode","importNode","stack","parts","walker","createTreeWalker","partIndex","nodeIndex","node","nextNode","nodeName","currentNode","pop","type","handleTextExpression","insertAfterNode","previousSibling","handleAttributeExpressions","strings","adoptNode","upgrade","policy","trustedTypes","createPolicy","createHTML","s","commentMarker","l","html","isCommentBinding","commentOpen","lastIndexOf","indexOf","attributeMatch","exec","substr","createElement","getHTML","innerHTML","isPrimitive","isIterable","Array","isArray","iterator","AttributeCommitter","dirty","_createPart","AttributePart","v","text","t","setAttribute","_getValue","committer","directive","__pendingValue","container","startNode","appendChild","endNode","ref","nextSibling","__insert","parentNode","__commitText","__commitTemplateResult","Node","__commitNode","__commitIterable","clear","insertBefore","valueAsString","nodeType","data","createTextNode","templateFactory","update","instance","_clone","itemParts","itemPart","item","appendIntoPart","insertAfterPart","start","end","n","removeChild","BooleanAttributePart","Error","removeAttribute","PropertyCommitter","super","single","PropertyPart","eventOptionsSupported","addEventListener","removeEventListener","_e","EventPart","eventName","eventContext","__boundHandleEvent","handleEvent","newListener","oldListener","shouldRemoveListener","capture","passive","shouldAddListener","__options","getOptions","call","toHTMLArray","nodes","toHTML","join","clean","obj","vdom","toString","substring","tag","props","prop","toProps","children","JSON","stringify","prefix","Map","win","openWin","open","write","location","href","closeWin","close","app","print_component_test","component","constructor","_actions","action","recording","p","log","newWin","cmd","get_components","components","debugging","Number","localStorage","getItem","print","key","comps","getElementById","el","state","Events","Components","tagName","toLowerCase","id","className","split","c","viewElement","viewComponents","_components","global_events","cache","add_component","viewEvents","a1","a2","setItem","run","_createEventTests","idx","command","info","devTools_running","devTools","connect","hash","send","buf","subscribe","message","payload","setState","newState","then"],"mappings":"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","file":"dist/apprun-dev-tools.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"apprun\"] = factory();\n\telse\n\t\troot[\"apprun\"] = factory();\n})(this, function() {\nreturn ","// The require scope\nvar __webpack_require__ = {};\n\n","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import { EventOptions} from './types'\nexport class App {\n\n  private _events: Object;\n\n  public start;\n  public h;\n  public createElement;\n  public render;\n  public Fragment;\n  public webComponent;\n\n  constructor() {\n    this._events = {};\n  }\n\n  on(name: string, fn: (...args) => void, options: EventOptions = {}): void {\n    this._events[name] = this._events[name] || [];\n    this._events[name].push({ fn, options });\n  }\n\n  off(name: string, fn: (...args) => void): void {\n    const subscribers = this._events[name] || [];\n\n    this._events[name] = subscribers.filter((sub) => sub.fn !== fn);\n  }\n\n  find(name: string): any {\n    return this._events[name];\n  }\n\n  run(name: string, ...args): number {\n    const subscribers = this.getSubscribers(name, this._events);\n    console.assert(subscribers && subscribers.length > 0, 'No subscriber for event: ' + name);\n    subscribers.forEach((sub) => {\n      const { fn, options } = sub;\n      if (options.delay) {\n        this.delay(name, fn, args, options);\n      } else {\n        Object.keys(options).length > 0 ? fn.apply(this, [...args, options]) : fn.apply(this, args);\n      }\n      return !sub.options.once;\n    });\n\n    return subscribers.length;\n  }\n\n  once(name: string, fn, options: EventOptions = {}): void {\n    this.on(name, fn, { ...options, once: true });\n  }\n\n  private delay(name, fn, args, options): void {\n    if (options._t) clearTimeout(options._t);\n    options._t = setTimeout(() => {\n      clearTimeout(options._t);\n      Object.keys(options).length > 0 ? fn.apply(this, [...args, options]) : fn.apply(this, args);\n    }, options.delay);\n  }\n\n  query(name: string, ...args): Promise<any[]> {\n    const subscribers = this.getSubscribers(name, this._events);\n    console.assert(subscribers && subscribers.length > 0, 'No subscriber for event: ' + name);\n    const promises = subscribers.map(sub => {\n      const { fn, options } = sub;\n      return Object.keys(options).length > 0 ? fn.apply(this, [...args, options]) : fn.apply(this, args);\n    });\n    return Promise.all(promises);\n  }\n\n  private getSubscribers(name: string, events) {\n    const subscribers = events[name] || [];\n\n    // Update the list of subscribers by pulling out those which will run once.\n    // We must do this update prior to running any of the events in case they\n    // cause additional events to be turned off or on.\n    events[name] = subscribers.filter((sub) => {\n      return !sub.options.once;\n    });\n    Object.keys(events).filter(evt => evt.endsWith('*') && name.startsWith(evt.replace('*', '')))\n      .sort((a, b) => b.length - a.length)\n      .forEach(evt => subscribers.push(...events[evt].map(sub => ({\n        ...sub,\n        options: { ...sub.options, event: name }\n      }))));\n    return subscribers;\n  }\n}\n\nconst AppRunVersions = 'AppRun-3';\nlet app: App;\nconst root = (typeof self === 'object' && self.self === self && self) ||\n  (typeof global === 'object' && global.global === global && global)\nif (root['app'] && root['_AppRunVersions']) {\n  app = root['app'];\n} else {\n  app = new App();\n  root['app'] = app;\n  root['_AppRunVersions'] = AppRunVersions;\n}\nexport default app;\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nconst directives = new WeakMap();\n/**\n * Brands a function as a directive factory function so that lit-html will call\n * the function during template rendering, rather than passing as a value.\n *\n * A _directive_ is a function that takes a Part as an argument. It has the\n * signature: `(part: Part) => void`.\n *\n * A directive _factory_ is a function that takes arguments for data and\n * configuration and returns a directive. Users of directive usually refer to\n * the directive factory as the directive. For example, \"The repeat directive\".\n *\n * Usually a template author will invoke a directive factory in their template\n * with relevant arguments, which will then return a directive function.\n *\n * Here's an example of using the `repeat()` directive factory that takes an\n * array and a function to render an item:\n *\n * ```js\n * html`<ul><${repeat(items, (item) => html`<li>${item}</li>`)}</ul>`\n * ```\n *\n * When `repeat` is invoked, it returns a directive function that closes over\n * `items` and the template function. When the outer template is rendered, the\n * return directive function is called with the Part for the expression.\n * `repeat` then performs it's custom logic to render multiple items.\n *\n * @param f The directive factory function. Must be a function that returns a\n * function of the signature `(part: Part) => void`. The returned function will\n * be called with the part object.\n *\n * @example\n *\n * import {directive, html} from 'lit-html';\n *\n * const immutable = directive((v) => (part) => {\n *   if (part.value !== v) {\n *     part.setValue(v)\n *   }\n * });\n */\nexport const directive = (f) => ((...args) => {\n    const d = f(...args);\n    directives.set(d, true);\n    return d;\n});\nexport const isDirective = (o) => {\n    return typeof o === 'function' && directives.has(o);\n};\n//# sourceMappingURL=directive.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * True if the custom elements polyfill is in use.\n */\nexport const isCEPolyfill = typeof window !== 'undefined' &&\n    window.customElements != null &&\n    window.customElements.polyfillWrapFlushCallback !==\n        undefined;\n/**\n * Reparents nodes, starting from `start` (inclusive) to `end` (exclusive),\n * into another container (could be the same container), before `before`. If\n * `before` is null, it appends the nodes to the container.\n */\nexport const reparentNodes = (container, start, end = null, before = null) => {\n    while (start !== end) {\n        const n = start.nextSibling;\n        container.insertBefore(start, before);\n        start = n;\n    }\n};\n/**\n * Removes nodes, starting from `start` (inclusive) to `end` (exclusive), from\n * `container`.\n */\nexport const removeNodes = (container, start, end = null) => {\n    while (start !== end) {\n        const n = start.nextSibling;\n        container.removeChild(start);\n        start = n;\n    }\n};\n//# sourceMappingURL=dom.js.map","/**\n * @license\n * Copyright (c) 2018 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * A sentinel value that signals that a value was handled by a directive and\n * should not be written to the DOM.\n */\nexport const noChange = {};\n/**\n * A sentinel value that signals a NodePart to fully clear its content.\n */\nexport const nothing = {};\n//# sourceMappingURL=part.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * An expression marker with embedded unique key to avoid collision with\n * possible text in templates.\n */\nexport const marker = `{{lit-${String(Math.random()).slice(2)}}}`;\n/**\n * An expression marker used text-positions, multi-binding attributes, and\n * attributes with markup-like text values.\n */\nexport const nodeMarker = `<!--${marker}-->`;\nexport const markerRegex = new RegExp(`${marker}|${nodeMarker}`);\n/**\n * Suffix appended to all bound attribute names.\n */\nexport const boundAttributeSuffix = '$lit$';\n/**\n * An updatable Template that tracks the location of dynamic parts.\n */\nexport class Template {\n    constructor(result, element) {\n        this.parts = [];\n        this.element = element;\n        const nodesToRemove = [];\n        const stack = [];\n        // Edge needs all 4 parameters present; IE11 needs 3rd parameter to be null\n        const walker = document.createTreeWalker(element.content, 133 /* NodeFilter.SHOW_{ELEMENT|COMMENT|TEXT} */, null, false);\n        // Keeps track of the last index associated with a part. We try to delete\n        // unnecessary nodes, but we never want to associate two different parts\n        // to the same index. They must have a constant node between.\n        let lastPartIndex = 0;\n        let index = -1;\n        let partIndex = 0;\n        const { strings, values: { length } } = result;\n        while (partIndex < length) {\n            const node = walker.nextNode();\n            if (node === null) {\n                // We've exhausted the content inside a nested template element.\n                // Because we still have parts (the outer for-loop), we know:\n                // - There is a template in the stack\n                // - The walker will find a nextNode outside the template\n                walker.currentNode = stack.pop();\n                continue;\n            }\n            index++;\n            if (node.nodeType === 1 /* Node.ELEMENT_NODE */) {\n                if (node.hasAttributes()) {\n                    const attributes = node.attributes;\n                    const { length } = attributes;\n                    // Per\n                    // https://developer.mozilla.org/en-US/docs/Web/API/NamedNodeMap,\n                    // attributes are not guaranteed to be returned in document order.\n                    // In particular, Edge/IE can return them out of order, so we cannot\n                    // assume a correspondence between part index and attribute index.\n                    let count = 0;\n                    for (let i = 0; i < length; i++) {\n                        if (endsWith(attributes[i].name, boundAttributeSuffix)) {\n                            count++;\n                        }\n                    }\n                    while (count-- > 0) {\n                        // Get the template literal section leading up to the first\n                        // expression in this attribute\n                        const stringForPart = strings[partIndex];\n                        // Find the attribute name\n                        const name = lastAttributeNameRegex.exec(stringForPart)[2];\n                        // Find the corresponding attribute\n                        // All bound attributes have had a suffix added in\n                        // TemplateResult#getHTML to opt out of special attribute\n                        // handling. To look up the attribute value we also need to add\n                        // the suffix.\n                        const attributeLookupName = name.toLowerCase() + boundAttributeSuffix;\n                        const attributeValue = node.getAttribute(attributeLookupName);\n                        node.removeAttribute(attributeLookupName);\n                        const statics = attributeValue.split(markerRegex);\n                        this.parts.push({ type: 'attribute', index, name, strings: statics });\n                        partIndex += statics.length - 1;\n                    }\n                }\n                if (node.tagName === 'TEMPLATE') {\n                    stack.push(node);\n                    walker.currentNode = node.content;\n                }\n            }\n            else if (node.nodeType === 3 /* Node.TEXT_NODE */) {\n                const data = node.data;\n                if (data.indexOf(marker) >= 0) {\n                    const parent = node.parentNode;\n                    const strings = data.split(markerRegex);\n                    const lastIndex = strings.length - 1;\n                    // Generate a new text node for each literal section\n                    // These nodes are also used as the markers for node parts\n                    for (let i = 0; i < lastIndex; i++) {\n                        let insert;\n                        let s = strings[i];\n                        if (s === '') {\n                            insert = createMarker();\n                        }\n                        else {\n                            const match = lastAttributeNameRegex.exec(s);\n                            if (match !== null && endsWith(match[2], boundAttributeSuffix)) {\n                                s = s.slice(0, match.index) + match[1] +\n                                    match[2].slice(0, -boundAttributeSuffix.length) + match[3];\n                            }\n                            insert = document.createTextNode(s);\n                        }\n                        parent.insertBefore(insert, node);\n                        this.parts.push({ type: 'node', index: ++index });\n                    }\n                    // If there's no text, we must insert a comment to mark our place.\n                    // Else, we can trust it will stick around after cloning.\n                    if (strings[lastIndex] === '') {\n                        parent.insertBefore(createMarker(), node);\n                        nodesToRemove.push(node);\n                    }\n                    else {\n                        node.data = strings[lastIndex];\n                    }\n                    // We have a part for each match found\n                    partIndex += lastIndex;\n                }\n            }\n            else if (node.nodeType === 8 /* Node.COMMENT_NODE */) {\n                if (node.data === marker) {\n                    const parent = node.parentNode;\n                    // Add a new marker node to be the startNode of the Part if any of\n                    // the following are true:\n                    //  * We don't have a previousSibling\n                    //  * The previousSibling is already the start of a previous part\n                    if (node.previousSibling === null || index === lastPartIndex) {\n                        index++;\n                        parent.insertBefore(createMarker(), node);\n                    }\n                    lastPartIndex = index;\n                    this.parts.push({ type: 'node', index });\n                    // If we don't have a nextSibling, keep this node so we have an end.\n                    // Else, we can remove it to save future costs.\n                    if (node.nextSibling === null) {\n                        node.data = '';\n                    }\n                    else {\n                        nodesToRemove.push(node);\n                        index--;\n                    }\n                    partIndex++;\n                }\n                else {\n                    let i = -1;\n                    while ((i = node.data.indexOf(marker, i + 1)) !== -1) {\n                        // Comment node has a binding marker inside, make an inactive part\n                        // The binding won't work, but subsequent bindings will\n                        // TODO (justinfagnani): consider whether it's even worth it to\n                        // make bindings in comments work\n                        this.parts.push({ type: 'node', index: -1 });\n                        partIndex++;\n                    }\n                }\n            }\n        }\n        // Remove text binding nodes after the walk to not disturb the TreeWalker\n        for (const n of nodesToRemove) {\n            n.parentNode.removeChild(n);\n        }\n    }\n}\nconst endsWith = (str, suffix) => {\n    const index = str.length - suffix.length;\n    return index >= 0 && str.slice(index) === suffix;\n};\nexport const isTemplatePartActive = (part) => part.index !== -1;\n// Allows `document.createComment('')` to be renamed for a\n// small manual size-savings.\nexport const createMarker = () => document.createComment('');\n/**\n * This regex extracts the attribute name preceding an attribute-position\n * expression. It does this by matching the syntax allowed for attributes\n * against the string literal directly preceding the expression, assuming that\n * the expression is in an attribute-value position.\n *\n * See attributes in the HTML spec:\n * https://www.w3.org/TR/html5/syntax.html#elements-attributes\n *\n * \" \\x09\\x0a\\x0c\\x0d\" are HTML space characters:\n * https://www.w3.org/TR/html5/infrastructure.html#space-characters\n *\n * \"\\0-\\x1F\\x7F-\\x9F\" are Unicode control characters, which includes every\n * space character except \" \".\n *\n * So an attribute is:\n *  * The name: any character except a control character, space character, ('),\n *    (\"), \">\", \"=\", or \"/\"\n *  * Followed by zero or more space characters\n *  * Followed by \"=\"\n *  * Followed by zero or more space characters\n *  * Followed by:\n *    * Any character except space, ('), (\"), \"<\", \">\", \"=\", (`), or\n *    * (\") then any non-(\"), or\n *    * (') then any non-(')\n */\nexport const lastAttributeNameRegex = \n// eslint-disable-next-line no-control-regex\n/([ \\x09\\x0a\\x0c\\x0d])([^\\0-\\x1F\\x7F-\\x9F \"'>=/]+)([ \\x09\\x0a\\x0c\\x0d]*=[ \\x09\\x0a\\x0c\\x0d]*(?:[^ \\x09\\x0a\\x0c\\x0d\"'`<>=]*|\"[^\"]*|'[^']*))$/;\n//# sourceMappingURL=template.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { isCEPolyfill } from './dom.js';\nimport { isTemplatePartActive } from './template.js';\n/**\n * An instance of a `Template` that can be attached to the DOM and updated\n * with new values.\n */\nexport class TemplateInstance {\n    constructor(template, processor, options) {\n        this.__parts = [];\n        this.template = template;\n        this.processor = processor;\n        this.options = options;\n    }\n    update(values) {\n        let i = 0;\n        for (const part of this.__parts) {\n            if (part !== undefined) {\n                part.setValue(values[i]);\n            }\n            i++;\n        }\n        for (const part of this.__parts) {\n            if (part !== undefined) {\n                part.commit();\n            }\n        }\n    }\n    _clone() {\n        // There are a number of steps in the lifecycle of a template instance's\n        // DOM fragment:\n        //  1. Clone - create the instance fragment\n        //  2. Adopt - adopt into the main document\n        //  3. Process - find part markers and create parts\n        //  4. Upgrade - upgrade custom elements\n        //  5. Update - set node, attribute, property, etc., values\n        //  6. Connect - connect to the document. Optional and outside of this\n        //     method.\n        //\n        // We have a few constraints on the ordering of these steps:\n        //  * We need to upgrade before updating, so that property values will pass\n        //    through any property setters.\n        //  * We would like to process before upgrading so that we're sure that the\n        //    cloned fragment is inert and not disturbed by self-modifying DOM.\n        //  * We want custom elements to upgrade even in disconnected fragments.\n        //\n        // Given these constraints, with full custom elements support we would\n        // prefer the order: Clone, Process, Adopt, Upgrade, Update, Connect\n        //\n        // But Safari does not implement CustomElementRegistry#upgrade, so we\n        // can not implement that order and still have upgrade-before-update and\n        // upgrade disconnected fragments. So we instead sacrifice the\n        // process-before-upgrade constraint, since in Custom Elements v1 elements\n        // must not modify their light DOM in the constructor. We still have issues\n        // when co-existing with CEv0 elements like Polymer 1, and with polyfills\n        // that don't strictly adhere to the no-modification rule because shadow\n        // DOM, which may be created in the constructor, is emulated by being placed\n        // in the light DOM.\n        //\n        // The resulting order is on native is: Clone, Adopt, Upgrade, Process,\n        // Update, Connect. document.importNode() performs Clone, Adopt, and Upgrade\n        // in one step.\n        //\n        // The Custom Elements v1 polyfill supports upgrade(), so the order when\n        // polyfilled is the more ideal: Clone, Process, Adopt, Upgrade, Update,\n        // Connect.\n        const fragment = isCEPolyfill ?\n            this.template.element.content.cloneNode(true) :\n            document.importNode(this.template.element.content, true);\n        const stack = [];\n        const parts = this.template.parts;\n        // Edge needs all 4 parameters present; IE11 needs 3rd parameter to be null\n        const walker = document.createTreeWalker(fragment, 133 /* NodeFilter.SHOW_{ELEMENT|COMMENT|TEXT} */, null, false);\n        let partIndex = 0;\n        let nodeIndex = 0;\n        let part;\n        let node = walker.nextNode();\n        // Loop through all the nodes and parts of a template\n        while (partIndex < parts.length) {\n            part = parts[partIndex];\n            if (!isTemplatePartActive(part)) {\n                this.__parts.push(undefined);\n                partIndex++;\n                continue;\n            }\n            // Progress the tree walker until we find our next part's node.\n            // Note that multiple parts may share the same node (attribute parts\n            // on a single element), so this loop may not run at all.\n            while (nodeIndex < part.index) {\n                nodeIndex++;\n                if (node.nodeName === 'TEMPLATE') {\n                    stack.push(node);\n                    walker.currentNode = node.content;\n                }\n                if ((node = walker.nextNode()) === null) {\n                    // We've exhausted the content inside a nested template element.\n                    // Because we still have parts (the outer for-loop), we know:\n                    // - There is a template in the stack\n                    // - The walker will find a nextNode outside the template\n                    walker.currentNode = stack.pop();\n                    node = walker.nextNode();\n                }\n            }\n            // We've arrived at our part's node.\n            if (part.type === 'node') {\n                const part = this.processor.handleTextExpression(this.options);\n                part.insertAfterNode(node.previousSibling);\n                this.__parts.push(part);\n            }\n            else {\n                this.__parts.push(...this.processor.handleAttributeExpressions(node, part.name, part.strings, this.options));\n            }\n            partIndex++;\n        }\n        if (isCEPolyfill) {\n            document.adoptNode(fragment);\n            customElements.upgrade(fragment);\n        }\n        return fragment;\n    }\n}\n//# sourceMappingURL=template-instance.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * @module lit-html\n */\nimport { reparentNodes } from './dom.js';\nimport { boundAttributeSuffix, lastAttributeNameRegex, marker, nodeMarker } from './template.js';\n/**\n * Our TrustedTypePolicy for HTML which is declared using the html template\n * tag function.\n *\n * That HTML is a developer-authored constant, and is parsed with innerHTML\n * before any untrusted expressions have been mixed in. Therefor it is\n * considered safe by construction.\n */\nconst policy = window.trustedTypes &&\n    trustedTypes.createPolicy('lit-html', { createHTML: (s) => s });\nconst commentMarker = ` ${marker} `;\n/**\n * The return type of `html`, which holds a Template and the values from\n * interpolated expressions.\n */\nexport class TemplateResult {\n    constructor(strings, values, type, processor) {\n        this.strings = strings;\n        this.values = values;\n        this.type = type;\n        this.processor = processor;\n    }\n    /**\n     * Returns a string of HTML used to create a `<template>` element.\n     */\n    getHTML() {\n        const l = this.strings.length - 1;\n        let html = '';\n        let isCommentBinding = false;\n        for (let i = 0; i < l; i++) {\n            const s = this.strings[i];\n            // For each binding we want to determine the kind of marker to insert\n            // into the template source before it's parsed by the browser's HTML\n            // parser. The marker type is based on whether the expression is in an\n            // attribute, text, or comment position.\n            //   * For node-position bindings we insert a comment with the marker\n            //     sentinel as its text content, like <!--{{lit-guid}}-->.\n            //   * For attribute bindings we insert just the marker sentinel for the\n            //     first binding, so that we support unquoted attribute bindings.\n            //     Subsequent bindings can use a comment marker because multi-binding\n            //     attributes must be quoted.\n            //   * For comment bindings we insert just the marker sentinel so we don't\n            //     close the comment.\n            //\n            // The following code scans the template source, but is *not* an HTML\n            // parser. We don't need to track the tree structure of the HTML, only\n            // whether a binding is inside a comment, and if not, if it appears to be\n            // the first binding in an attribute.\n            const commentOpen = s.lastIndexOf('<!--');\n            // We're in comment position if we have a comment open with no following\n            // comment close. Because <-- can appear in an attribute value there can\n            // be false positives.\n            isCommentBinding = (commentOpen > -1 || isCommentBinding) &&\n                s.indexOf('-->', commentOpen + 1) === -1;\n            // Check to see if we have an attribute-like sequence preceding the\n            // expression. This can match \"name=value\" like structures in text,\n            // comments, and attribute values, so there can be false-positives.\n            const attributeMatch = lastAttributeNameRegex.exec(s);\n            if (attributeMatch === null) {\n                // We're only in this branch if we don't have a attribute-like\n                // preceding sequence. For comments, this guards against unusual\n                // attribute values like <div foo=\"<!--${'bar'}\">. Cases like\n                // <!-- foo=${'bar'}--> are handled correctly in the attribute branch\n                // below.\n                html += s + (isCommentBinding ? commentMarker : nodeMarker);\n            }\n            else {\n                // For attributes we use just a marker sentinel, and also append a\n                // $lit$ suffix to the name to opt-out of attribute-specific parsing\n                // that IE and Edge do for style and certain SVG attributes.\n                html += s.substr(0, attributeMatch.index) + attributeMatch[1] +\n                    attributeMatch[2] + boundAttributeSuffix + attributeMatch[3] +\n                    marker;\n            }\n        }\n        html += this.strings[l];\n        return html;\n    }\n    getTemplateElement() {\n        const template = document.createElement('template');\n        let value = this.getHTML();\n        if (policy !== undefined) {\n            // this is secure because `this.strings` is a TemplateStringsArray.\n            // TODO: validate this when\n            // https://github.com/tc39/proposal-array-is-template-object is\n            // implemented.\n            value = policy.createHTML(value);\n        }\n        template.innerHTML = value;\n        return template;\n    }\n}\n/**\n * A TemplateResult for SVG fragments.\n *\n * This class wraps HTML in an `<svg>` tag in order to parse its contents in the\n * SVG namespace, then modifies the template to remove the `<svg>` tag so that\n * clones only container the original fragment.\n */\nexport class SVGTemplateResult extends TemplateResult {\n    getHTML() {\n        return `<svg>${super.getHTML()}</svg>`;\n    }\n    getTemplateElement() {\n        const template = super.getTemplateElement();\n        const content = template.content;\n        const svgElement = content.firstChild;\n        content.removeChild(svgElement);\n        reparentNodes(content, svgElement.firstChild);\n        return template;\n    }\n}\n//# sourceMappingURL=template-result.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { isDirective } from './directive.js';\nimport { removeNodes } from './dom.js';\nimport { noChange, nothing } from './part.js';\nimport { TemplateInstance } from './template-instance.js';\nimport { TemplateResult } from './template-result.js';\nimport { createMarker } from './template.js';\nexport const isPrimitive = (value) => {\n    return (value === null ||\n        !(typeof value === 'object' || typeof value === 'function'));\n};\nexport const isIterable = (value) => {\n    return Array.isArray(value) ||\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        !!(value && value[Symbol.iterator]);\n};\n/**\n * Writes attribute values to the DOM for a group of AttributeParts bound to a\n * single attribute. The value is only set once even if there are multiple parts\n * for an attribute.\n */\nexport class AttributeCommitter {\n    constructor(element, name, strings) {\n        this.dirty = true;\n        this.element = element;\n        this.name = name;\n        this.strings = strings;\n        this.parts = [];\n        for (let i = 0; i < strings.length - 1; i++) {\n            this.parts[i] = this._createPart();\n        }\n    }\n    /**\n     * Creates a single part. Override this to create a differnt type of part.\n     */\n    _createPart() {\n        return new AttributePart(this);\n    }\n    _getValue() {\n        const strings = this.strings;\n        const l = strings.length - 1;\n        const parts = this.parts;\n        // If we're assigning an attribute via syntax like:\n        //    attr=\"${foo}\"  or  attr=${foo}\n        // but not\n        //    attr=\"${foo} ${bar}\" or attr=\"${foo} baz\"\n        // then we don't want to coerce the attribute value into one long\n        // string. Instead we want to just return the value itself directly,\n        // so that sanitizeDOMValue can get the actual value rather than\n        // String(value)\n        // The exception is if v is an array, in which case we do want to smash\n        // it together into a string without calling String() on the array.\n        //\n        // This also allows trusted values (when using TrustedTypes) being\n        // assigned to DOM sinks without being stringified in the process.\n        if (l === 1 && strings[0] === '' && strings[1] === '') {\n            const v = parts[0].value;\n            if (typeof v === 'symbol') {\n                return String(v);\n            }\n            if (typeof v === 'string' || !isIterable(v)) {\n                return v;\n            }\n        }\n        let text = '';\n        for (let i = 0; i < l; i++) {\n            text += strings[i];\n            const part = parts[i];\n            if (part !== undefined) {\n                const v = part.value;\n                if (isPrimitive(v) || !isIterable(v)) {\n                    text += typeof v === 'string' ? v : String(v);\n                }\n                else {\n                    for (const t of v) {\n                        text += typeof t === 'string' ? t : String(t);\n                    }\n                }\n            }\n        }\n        text += strings[l];\n        return text;\n    }\n    commit() {\n        if (this.dirty) {\n            this.dirty = false;\n            this.element.setAttribute(this.name, this._getValue());\n        }\n    }\n}\n/**\n * A Part that controls all or part of an attribute value.\n */\nexport class AttributePart {\n    constructor(committer) {\n        this.value = undefined;\n        this.committer = committer;\n    }\n    setValue(value) {\n        if (value !== noChange && (!isPrimitive(value) || value !== this.value)) {\n            this.value = value;\n            // If the value is a not a directive, dirty the committer so that it'll\n            // call setAttribute. If the value is a directive, it'll dirty the\n            // committer if it calls setValue().\n            if (!isDirective(value)) {\n                this.committer.dirty = true;\n            }\n        }\n    }\n    commit() {\n        while (isDirective(this.value)) {\n            const directive = this.value;\n            this.value = noChange;\n            directive(this);\n        }\n        if (this.value === noChange) {\n            return;\n        }\n        this.committer.commit();\n    }\n}\n/**\n * A Part that controls a location within a Node tree. Like a Range, NodePart\n * has start and end locations and can set and update the Nodes between those\n * locations.\n *\n * NodeParts support several value types: primitives, Nodes, TemplateResults,\n * as well as arrays and iterables of those types.\n */\nexport class NodePart {\n    constructor(options) {\n        this.value = undefined;\n        this.__pendingValue = undefined;\n        this.options = options;\n    }\n    /**\n     * Appends this part into a container.\n     *\n     * This part must be empty, as its contents are not automatically moved.\n     */\n    appendInto(container) {\n        this.startNode = container.appendChild(createMarker());\n        this.endNode = container.appendChild(createMarker());\n    }\n    /**\n     * Inserts this part after the `ref` node (between `ref` and `ref`'s next\n     * sibling). Both `ref` and its next sibling must be static, unchanging nodes\n     * such as those that appear in a literal section of a template.\n     *\n     * This part must be empty, as its contents are not automatically moved.\n     */\n    insertAfterNode(ref) {\n        this.startNode = ref;\n        this.endNode = ref.nextSibling;\n    }\n    /**\n     * Appends this part into a parent part.\n     *\n     * This part must be empty, as its contents are not automatically moved.\n     */\n    appendIntoPart(part) {\n        part.__insert(this.startNode = createMarker());\n        part.__insert(this.endNode = createMarker());\n    }\n    /**\n     * Inserts this part after the `ref` part.\n     *\n     * This part must be empty, as its contents are not automatically moved.\n     */\n    insertAfterPart(ref) {\n        ref.__insert(this.startNode = createMarker());\n        this.endNode = ref.endNode;\n        ref.endNode = this.startNode;\n    }\n    setValue(value) {\n        this.__pendingValue = value;\n    }\n    commit() {\n        if (this.startNode.parentNode === null) {\n            return;\n        }\n        while (isDirective(this.__pendingValue)) {\n            const directive = this.__pendingValue;\n            this.__pendingValue = noChange;\n            directive(this);\n        }\n        const value = this.__pendingValue;\n        if (value === noChange) {\n            return;\n        }\n        if (isPrimitive(value)) {\n            if (value !== this.value) {\n                this.__commitText(value);\n            }\n        }\n        else if (value instanceof TemplateResult) {\n            this.__commitTemplateResult(value);\n        }\n        else if (value instanceof Node) {\n            this.__commitNode(value);\n        }\n        else if (isIterable(value)) {\n            this.__commitIterable(value);\n        }\n        else if (value === nothing) {\n            this.value = nothing;\n            this.clear();\n        }\n        else {\n            // Fallback, will render the string representation\n            this.__commitText(value);\n        }\n    }\n    __insert(node) {\n        this.endNode.parentNode.insertBefore(node, this.endNode);\n    }\n    __commitNode(value) {\n        if (this.value === value) {\n            return;\n        }\n        this.clear();\n        this.__insert(value);\n        this.value = value;\n    }\n    __commitText(value) {\n        const node = this.startNode.nextSibling;\n        value = value == null ? '' : value;\n        // If `value` isn't already a string, we explicitly convert it here in case\n        // it can't be implicitly converted - i.e. it's a symbol.\n        const valueAsString = typeof value === 'string' ? value : String(value);\n        if (node === this.endNode.previousSibling &&\n            node.nodeType === 3 /* Node.TEXT_NODE */) {\n            // If we only have a single text node between the markers, we can just\n            // set its value, rather than replacing it.\n            // TODO(justinfagnani): Can we just check if this.value is primitive?\n            node.data = valueAsString;\n        }\n        else {\n            this.__commitNode(document.createTextNode(valueAsString));\n        }\n        this.value = value;\n    }\n    __commitTemplateResult(value) {\n        const template = this.options.templateFactory(value);\n        if (this.value instanceof TemplateInstance &&\n            this.value.template === template) {\n            this.value.update(value.values);\n        }\n        else {\n            // Make sure we propagate the template processor from the TemplateResult\n            // so that we use its syntax extension, etc. The template factory comes\n            // from the render function options so that it can control template\n            // caching and preprocessing.\n            const instance = new TemplateInstance(template, value.processor, this.options);\n            const fragment = instance._clone();\n            instance.update(value.values);\n            this.__commitNode(fragment);\n            this.value = instance;\n        }\n    }\n    __commitIterable(value) {\n        // For an Iterable, we create a new InstancePart per item, then set its\n        // value to the item. This is a little bit of overhead for every item in\n        // an Iterable, but it lets us recurse easily and efficiently update Arrays\n        // of TemplateResults that will be commonly returned from expressions like:\n        // array.map((i) => html`${i}`), by reusing existing TemplateInstances.\n        // If _value is an array, then the previous render was of an\n        // iterable and _value will contain the NodeParts from the previous\n        // render. If _value is not an array, clear this part and make a new\n        // array for NodeParts.\n        if (!Array.isArray(this.value)) {\n            this.value = [];\n            this.clear();\n        }\n        // Lets us keep track of how many items we stamped so we can clear leftover\n        // items from a previous render\n        const itemParts = this.value;\n        let partIndex = 0;\n        let itemPart;\n        for (const item of value) {\n            // Try to reuse an existing part\n            itemPart = itemParts[partIndex];\n            // If no existing part, create a new one\n            if (itemPart === undefined) {\n                itemPart = new NodePart(this.options);\n                itemParts.push(itemPart);\n                if (partIndex === 0) {\n                    itemPart.appendIntoPart(this);\n                }\n                else {\n                    itemPart.insertAfterPart(itemParts[partIndex - 1]);\n                }\n            }\n            itemPart.setValue(item);\n            itemPart.commit();\n            partIndex++;\n        }\n        if (partIndex < itemParts.length) {\n            // Truncate the parts array so _value reflects the current state\n            itemParts.length = partIndex;\n            this.clear(itemPart && itemPart.endNode);\n        }\n    }\n    clear(startNode = this.startNode) {\n        removeNodes(this.startNode.parentNode, startNode.nextSibling, this.endNode);\n    }\n}\n/**\n * Implements a boolean attribute, roughly as defined in the HTML\n * specification.\n *\n * If the value is truthy, then the attribute is present with a value of\n * ''. If the value is falsey, the attribute is removed.\n */\nexport class BooleanAttributePart {\n    constructor(element, name, strings) {\n        this.value = undefined;\n        this.__pendingValue = undefined;\n        if (strings.length !== 2 || strings[0] !== '' || strings[1] !== '') {\n            throw new Error('Boolean attributes can only contain a single expression');\n        }\n        this.element = element;\n        this.name = name;\n        this.strings = strings;\n    }\n    setValue(value) {\n        this.__pendingValue = value;\n    }\n    commit() {\n        while (isDirective(this.__pendingValue)) {\n            const directive = this.__pendingValue;\n            this.__pendingValue = noChange;\n            directive(this);\n        }\n        if (this.__pendingValue === noChange) {\n            return;\n        }\n        const value = !!this.__pendingValue;\n        if (this.value !== value) {\n            if (value) {\n                this.element.setAttribute(this.name, '');\n            }\n            else {\n                this.element.removeAttribute(this.name);\n            }\n            this.value = value;\n        }\n        this.__pendingValue = noChange;\n    }\n}\n/**\n * Sets attribute values for PropertyParts, so that the value is only set once\n * even if there are multiple parts for a property.\n *\n * If an expression controls the whole property value, then the value is simply\n * assigned to the property under control. If there are string literals or\n * multiple expressions, then the strings are expressions are interpolated into\n * a string first.\n */\nexport class PropertyCommitter extends AttributeCommitter {\n    constructor(element, name, strings) {\n        super(element, name, strings);\n        this.single =\n            (strings.length === 2 && strings[0] === '' && strings[1] === '');\n    }\n    _createPart() {\n        return new PropertyPart(this);\n    }\n    _getValue() {\n        if (this.single) {\n            return this.parts[0].value;\n        }\n        return super._getValue();\n    }\n    commit() {\n        if (this.dirty) {\n            this.dirty = false;\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            this.element[this.name] = this._getValue();\n        }\n    }\n}\nexport class PropertyPart extends AttributePart {\n}\n// Detect event listener options support. If the `capture` property is read\n// from the options object, then options are supported. If not, then the third\n// argument to add/removeEventListener is interpreted as the boolean capture\n// value so we should only pass the `capture` property.\nlet eventOptionsSupported = false;\n// Wrap into an IIFE because MS Edge <= v41 does not support having try/catch\n// blocks right into the body of a module\n(() => {\n    try {\n        const options = {\n            get capture() {\n                eventOptionsSupported = true;\n                return false;\n            }\n        };\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        window.addEventListener('test', options, options);\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        window.removeEventListener('test', options, options);\n    }\n    catch (_e) {\n        // event options not supported\n    }\n})();\nexport class EventPart {\n    constructor(element, eventName, eventContext) {\n        this.value = undefined;\n        this.__pendingValue = undefined;\n        this.element = element;\n        this.eventName = eventName;\n        this.eventContext = eventContext;\n        this.__boundHandleEvent = (e) => this.handleEvent(e);\n    }\n    setValue(value) {\n        this.__pendingValue = value;\n    }\n    commit() {\n        while (isDirective(this.__pendingValue)) {\n            const directive = this.__pendingValue;\n            this.__pendingValue = noChange;\n            directive(this);\n        }\n        if (this.__pendingValue === noChange) {\n            return;\n        }\n        const newListener = this.__pendingValue;\n        const oldListener = this.value;\n        const shouldRemoveListener = newListener == null ||\n            oldListener != null &&\n                (newListener.capture !== oldListener.capture ||\n                    newListener.once !== oldListener.once ||\n                    newListener.passive !== oldListener.passive);\n        const shouldAddListener = newListener != null && (oldListener == null || shouldRemoveListener);\n        if (shouldRemoveListener) {\n            this.element.removeEventListener(this.eventName, this.__boundHandleEvent, this.__options);\n        }\n        if (shouldAddListener) {\n            this.__options = getOptions(newListener);\n            this.element.addEventListener(this.eventName, this.__boundHandleEvent, this.__options);\n        }\n        this.value = newListener;\n        this.__pendingValue = noChange;\n    }\n    handleEvent(event) {\n        if (typeof this.value === 'function') {\n            this.value.call(this.eventContext || this.element, event);\n        }\n        else {\n            this.value.handleEvent(event);\n        }\n    }\n}\n// We copy options because of the inconsistent behavior of browsers when reading\n// the third argument of add/removeEventListener. IE11 doesn't support options\n// at all. Chrome 41 only reads `capture` if the argument is an object.\nconst getOptions = (o) => o &&\n    (eventOptionsSupported ?\n        { capture: o.capture, passive: o.passive, once: o.once } :\n        o.capture);\n//# sourceMappingURL=parts.js.map","\nimport { VDOM } from './types';\nimport { TemplateResult } from 'lit-html';\n\nfunction getProp(prop) {\n  if (typeof prop === 'object') {\n    return Object.keys(prop).map(name => `${name}:${prop[name]}`).join(';');\n  }\n  else return prop.toString();\n}\n\nfunction toProps(props) {\n  return Object.keys(props)\n    .map(name => ` ${name === 'className' ? 'class' : name}=\"${getProp(props[name])}\"`)\n    .join('');\n}\n\nfunction toHTMLArray(nodes) {\n  return nodes.map(node => toHTML(node)).join('');\n}\n\nfunction clean(obj) {\n  for (var i in obj) {\n    if (obj[i] == null) {\n      delete obj[i];\n    } else if (typeof obj[i] === 'object') {\n      clean(obj[i]);\n    }\n  }\n}\n\nfunction toHTML (vdom: VDOM) {\n  if (!vdom) return '';\n  if (vdom instanceof TemplateResult) {\n    return vdom.toString();\n  }\n  clean(vdom);\n  if (Array.isArray(vdom)) return toHTMLArray(vdom);\n  if (typeof vdom === 'string') {\n    return vdom.startsWith('_html:') ? vdom.substring(6) : vdom;\n  } else if (vdom.tag) {\n    const props = vdom.props ? toProps(vdom.props) : '';\n    const children = vdom.children ? toHTMLArray(vdom.children) : '';\n    return `<${vdom.tag}${props}>${children}</${vdom.tag}>`;\n  }\n  if (typeof vdom === 'object') return JSON.stringify(vdom);\n}\n\nexport default toHTML;","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { AttributeCommitter, BooleanAttributePart, EventPart, NodePart, PropertyCommitter } from './parts.js';\n/**\n * Creates Parts when a template is instantiated.\n */\nexport class DefaultTemplateProcessor {\n    /**\n     * Create parts for an attribute-position binding, given the event, attribute\n     * name, and string literals.\n     *\n     * @param element The element containing the binding\n     * @param name  The attribute name\n     * @param strings The string literals. There are always at least two strings,\n     *   event for fully-controlled bindings with a single expression.\n     */\n    handleAttributeExpressions(element, name, strings, options) {\n        const prefix = name[0];\n        if (prefix === '.') {\n            const committer = new PropertyCommitter(element, name.slice(1), strings);\n            return committer.parts;\n        }\n        if (prefix === '@') {\n            return [new EventPart(element, name.slice(1), options.eventContext)];\n        }\n        if (prefix === '?') {\n            return [new BooleanAttributePart(element, name.slice(1), strings)];\n        }\n        const committer = new AttributeCommitter(element, name, strings);\n        return committer.parts;\n    }\n    /**\n     * Create parts for a text-position binding.\n     * @param templateFactory\n     */\n    handleTextExpression(options) {\n        return new NodePart(options);\n    }\n}\nexport const defaultTemplateProcessor = new DefaultTemplateProcessor();\n//# sourceMappingURL=default-template-processor.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { marker, Template } from './template.js';\n/**\n * The default TemplateFactory which caches Templates keyed on\n * result.type and result.strings.\n */\nexport function templateFactory(result) {\n    let templateCache = templateCaches.get(result.type);\n    if (templateCache === undefined) {\n        templateCache = {\n            stringsArray: new WeakMap(),\n            keyString: new Map()\n        };\n        templateCaches.set(result.type, templateCache);\n    }\n    let template = templateCache.stringsArray.get(result.strings);\n    if (template !== undefined) {\n        return template;\n    }\n    // If the TemplateStringsArray is new, generate a key from the strings\n    // This key is shared between all templates with identical content\n    const key = result.strings.join(marker);\n    // Check if we already have a Template for this key\n    template = templateCache.keyString.get(key);\n    if (template === undefined) {\n        // If we have not seen this key before, create a new Template\n        template = new Template(result, result.getTemplateElement());\n        // Cache the Template for this key\n        templateCache.keyString.set(key, template);\n    }\n    // Cache all future queries for this TemplateStringsArray\n    templateCache.stringsArray.set(result.strings, template);\n    return template;\n}\nexport const templateCaches = new Map();\n//# sourceMappingURL=template-factory.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { removeNodes } from './dom.js';\nimport { NodePart } from './parts.js';\nimport { templateFactory } from './template-factory.js';\nexport const parts = new WeakMap();\n/**\n * Renders a template result or other value to a container.\n *\n * To update a container with new values, reevaluate the template literal and\n * call `render` with the new result.\n *\n * @param result Any value renderable by NodePart - typically a TemplateResult\n *     created by evaluating a template tag like `html` or `svg`.\n * @param container A DOM parent to render to. The entire contents are either\n *     replaced, or efficiently updated if the same result type was previous\n *     rendered there.\n * @param options RenderOptions for the entire render tree rendered to this\n *     container. Render options must *not* change between renders to the same\n *     container, as those changes will not effect previously rendered DOM.\n */\nexport const render = (result, container, options) => {\n    let part = parts.get(container);\n    if (part === undefined) {\n        removeNodes(container, container.firstChild);\n        parts.set(container, part = new NodePart(Object.assign({ templateFactory }, options)));\n        part.appendInto(container);\n    }\n    part.setValue(result);\n    part.commit();\n};\n//# sourceMappingURL=render.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n *\n * Main lit-html module.\n *\n * Main exports:\n *\n * -  [[html]]\n * -  [[svg]]\n * -  [[render]]\n *\n * @packageDocumentation\n */\n/**\n * Do not remove this comment; it keeps typedoc from misplacing the module\n * docs.\n */\nimport { defaultTemplateProcessor } from './lib/default-template-processor.js';\nimport { SVGTemplateResult, TemplateResult } from './lib/template-result.js';\nexport { DefaultTemplateProcessor, defaultTemplateProcessor } from './lib/default-template-processor.js';\nexport { directive, isDirective } from './lib/directive.js';\n// TODO(justinfagnani): remove line when we get NodePart moving methods\nexport { removeNodes, reparentNodes } from './lib/dom.js';\nexport { noChange, nothing } from './lib/part.js';\nexport { AttributeCommitter, AttributePart, BooleanAttributePart, EventPart, isIterable, isPrimitive, NodePart, PropertyCommitter, PropertyPart } from './lib/parts.js';\nexport { parts, render } from './lib/render.js';\nexport { templateCaches, templateFactory } from './lib/template-factory.js';\nexport { TemplateInstance } from './lib/template-instance.js';\nexport { SVGTemplateResult, TemplateResult } from './lib/template-result.js';\nexport { createMarker, isTemplatePartActive, Template } from './lib/template.js';\n// IMPORTANT: do not change the property name or the assignment expression.\n// This line will be used in regexes to search for lit-html usage.\n// TODO(justinfagnani): inject version number at build time\nif (typeof window !== 'undefined') {\n    (window['litHtmlVersions'] || (window['litHtmlVersions'] = [])).push('1.4.1');\n}\n/**\n * Interprets a template literal as an HTML template that can efficiently\n * render to and update a container.\n */\nexport const html = (strings, ...values) => new TemplateResult(strings, values, 'html', defaultTemplateProcessor);\n/**\n * Interprets a template literal as an SVG template that can efficiently\n * render to and update a container.\n */\nexport const svg = (strings, ...values) => new SVGTemplateResult(strings, values, 'svg', defaultTemplateProcessor);\n//# sourceMappingURL=lit-html.js.map","declare var app;\nlet win;\napp['debug'] = true;\n\nfunction openWin(name) {\n  win = window.open('', name);\n  win.document.write(`<html>\n  <title>AppRun Analyzer | ${document.location.href}</title>\n  <style>\n    body { font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\" }\n  </style>\n  <body><pre>`);\n}\n\nfunction write(text) {\n  win.document.write(text + '\\n');\n}\n\nfunction closeWin() {\n  win.document.write(`</pre>\n  </body>\n  </html>`);\n  win.document.close();\n}\n\nconst print_component_test = component => {\n  write(`import ${component.constructor.name} from '../src/${component.constructor.name}'`);\n  write(`describe('${component.constructor.name}', ()=>{`);\n  component._actions.forEach(action => {\n    if (action.name !== '.') {\n      write(`  it ('should handle event: ${action.name}', (done)=>{`);\n      write(`    const component = new ${component.constructor.name}().mount();`);\n      write(`    component.run('${action.name}');`);\n      write(`    setTimeout(() => {`);\n      write(`      \\/\\/expect(?).toHaveBeenCalled();`);\n      write(`      \\/\\/expect(component.state).toBe(?);`);\n      write(`    done();`);\n      write(`  })`);\n    }\n  });\n  write(`});`);\n};\nexport const _createEventTests = () => {\n  const o = { components: {} };\n  app.run('get-components', o);\n  const { components } = o;\n  openWin('');\n  if (components instanceof Map) {\n    for (let [key, comps] of components) {\n      comps.forEach(print_component_test);\n    }\n  } else {\n    Object.keys(components).forEach(el => {\n      components[el].forEach(print_component_test);\n    });\n  }\n  closeWin();\n}\n\nlet recording = false;\nlet events = [];\n\napp.on('debug', p => {\n  if (recording && p.vdom) {\n    events.push(p);\n    console.log(`* ${events.length} state(s) recorded.`);\n  }\n});\n\nexport const _createStateTests = (s) => {\n\n  const printTests = () => {\n    if (events.length === 0) {\n      console.log('* No state recorded.');\n      return;\n    }\n    openWin('');\n    events.forEach((event, idx) => {\n      write(`  it ('view snapshot: #${idx + 1}', ()=>{`);\n      write(`    const component = new ${event.component.constructor.name}()`);\n      write(`    const state = ${JSON.stringify(event.state, undefined, 2)};`);\n      write(`    const vdom = component['view'](state);`);\n      write(`    expect(JSON.stringify(vdom)).toMatchSnapshot();`);\n      write(`  })`);\n    });\n    closeWin();\n  }\n\n  if (s === 'start') {\n    events = [];\n    recording = true;\n    console.log('* State logging started.');\n  } else if (s === 'stop') {\n    printTests();\n    recording = false;\n    events = [];\n    console.log('* State logging stopped.');\n  } else {\n    console.log('create-state-tests <start|stop>');\n  }\n}\n","import app from './app';\nimport toHTML from './vdom-to-html';\nimport { _createEventTests, _createStateTests } from './apprun-dev-tools-tests';\n\napp['debug'] = true;\n\nwindow['_apprun-help'] = ['', () => {\n  Object.keys(window).forEach(cmd => {\n    if (cmd.startsWith('_apprun-')) {\n      cmd === '_apprun-help' ?\n        console.log('AppRun Commands:') :\n        console.log(`* ${cmd.substring(8)}: ${window[cmd][0]}`);\n    }\n  });\n}];\n\nfunction newWin(html) {\n  const win = window.open('', '_apprun_debug', 'toolbar=0');\n  win.document.write(`<html>\n  <title>AppRun Analyzer | ${document.location.href}</title>\n  <style>\n    body { font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\" }\n    li { margin-left: 80px; }\n  </style>\n  <body>\n  <div id=\"main\">${html}</div>\n  </script>\n  </body>\n  </html>`);\n  win.document.close();\n}\n\nconst get_components = () => {\n  const o = { components: {} };\n  app.run('get-components', o);\n  const { components } = o;\n  return components;\n}\nconst viewElement = element => <div>\n  {element.tagName.toLowerCase()}{element.id ? '#' + element.id : ''}\n  {' '}\n  {element.className && element.className.split(' ').map(c => '.' + c).join() }\n</div>;\n\nconst viewComponents = state => {\n\n  const Events = ({ events }) => <ul>\n    {events && events.filter(event => event.name !== '.').map(event => <li>\n      {event.name}\n    </li>)}\n  </ul>;\n\n  const Components = ({ components }) => <ul>\n    {components.map(component => <li>\n      <div>{component.constructor.name}</div>\n      <Events events={component['_actions']} />\n    </li>)}\n  </ul>;\n\n  return <ul>\n    {state.map(({ element, comps}) => <li>\n      <div>{viewElement(element)}</div>\n      <Components components={comps} />\n    </li>)}\n  </ul>\n}\n\nconst viewEvents = state => {\n\n  const Components = ({ components }) => <ul>\n    {components.map(component => <li>\n      <div>{component.constructor.name}</div>\n    </li>)}\n  </ul>;\n\n  const Events = ({ events, global }) => <ul>\n    {events && events\n      .filter(event =>\n        event.global === global && event.event !== '.')\n      .map(({ event, components }) => <li>\n        <div>{event}</div>\n        <Components components={components} />\n      </li>)}\n  </ul>;\n\n  return <div>\n    <div>GLOBAL EVENTS</div>\n    <Events events={state} global={true} />\n    <div>LOCAL EVENTS</div>\n    <Events events={state} global={false} />\n  </div>\n}\n\nconst _events = (print?) => {\n  const global_events = app['_events']\n  const events = {};\n  const cache = get_components();\n\n  const add_component = component => component['_actions'].forEach(event => {\n    events[event.name] = events[event.name] || [];\n    events[event.name].push(component);\n  });\n\n  if (cache instanceof Map) {\n    for (let [key, comps] of cache) {\n      comps.forEach(add_component);\n    }\n  } else {\n    Object.keys(cache).forEach(el =>\n      cache[el].forEach(add_component)\n    );\n  }\n  const data = [];\n  Object.keys(events).forEach(event => {\n    data.push({ event, components: events[event], global: global_events[event] ? true : false });\n  });\n\n  data.sort(((a, b) => a.event > b.event ? 1 : -1)).map(e => e.event);\n\n  if (print) {\n    const vdom = viewEvents(data);\n    newWin(toHTML(vdom));\n  } else {\n    console.log('=== GLOBAL EVENTS ===')\n    data.filter(event => event.global && event.event !== '.')\n      .forEach(({ event, components }) => console.log({ event }, components));\n    console.log('=== LOCAL EVENTS ===')\n    data.filter(event => !event.global && event.event !== '.')\n      .forEach(({ event, components }) => console.log({ event }, components));\n  }\n}\n\nconst _components = (print?) => {\n  const components = get_components();\n  const data = [];\n\n  if (components instanceof Map) {\n    for (let [key, comps] of components) {\n      const element = typeof key === 'string' ? document.getElementById(key) : key;\n      data.push({ element, comps });\n    }\n  } else {\n    Object.keys(components).forEach(el => {\n      const element = typeof el === 'string' ? document.getElementById(el) : el;\n      data.push({ element, comps: components[el] });\n    });\n  }\n  if (print) {\n    const vdom = viewComponents(data);\n    newWin(toHTML(vdom));\n  } else {\n    data.forEach(({ element, comps }) => console.log(element, comps));\n  }\n}\n\nlet debugging = Number(window?.localStorage?.getItem('__apprun_debugging__')) || 0;\napp.on('debug', p => {\n  if (debugging & 1 && p.event) console.log(p);\n  if (debugging & 2 && p.vdom) console.log(p);\n});\n\nwindow['_apprun-components'] = ['components [print]', (p) => {\n  _components(p === 'print');\n}]\n\nwindow['_apprun-events'] = ['events [print]', (p) => {\n  _events(p === 'print');\n}]\n\nwindow['_apprun-log'] = ['log [event|view] on|off', (a1?, a2?) => {\n  if (a1 === 'on') {\n    debugging = 3;\n  } else if (a1 === 'off') {\n    debugging = 0;\n  } else if (a1 === 'event') {\n    if (a2 === 'on') {\n      debugging |= 1;\n    } else if (a2 === 'off') {\n      debugging &= ~1;\n    }\n  } else if (a1 === 'view') {\n    if (a2 === 'on') {\n      debugging |= 2;\n    } else if (a2 === 'off') {\n      debugging &= ~2;\n    }\n  }\n  console.log(`* log ${a1} ${a2 || ''}`);\n  window?.localStorage?.setItem('__apprun_debugging__', `${debugging}`)\n}];\n\nwindow['_apprun-create-event-tests'] = ['create-event-tests',\n  () => _createEventTests()\n]\n\nwindow['_apprun-create-state-tests'] = ['create-state-tests <start|stop>',\n  (p?) => _createStateTests(p)\n]\n\nwindow['_apprun'] = (strings) => {\n  const [cmd, ...p] = strings[0].split(' ').filter(c => !!c);\n  const command = window[`_apprun-${cmd}`];\n  if (command) command[1](...p);\n  else window['_apprun-help'][1]();\n}\n\nconsole.info('AppRun DevTools 2.27: type \"_apprun `help`\" to list all available commands.');\n\nconst reduxExt = window['__REDUX_DEVTOOLS_EXTENSION__'];\nif (reduxExt) {\n  let devTools_running = false;\n  const devTools = window['__REDUX_DEVTOOLS_EXTENSION__'].connect();\n  if (devTools) {\n    const hash = location.hash || '#';\n    devTools.send(hash, '' );\n    const buf = [{ component:null, state:''}];\n    console.info('Connected to the Redux DevTools');\n    devTools.subscribe((message) => {\n      if (message.type === 'START') devTools_running = true;\n      else if (message.type === 'STOP') devTools_running = false;\n      else if (message.type === 'DISPATCH') {\n        // console.log('From Redux DevTools: ', message);\n        const idx = message.payload.index;\n        if (idx === 0) { app.run(hash) }\n        else {\n          const { component, state } = buf[idx];\n          component?.setState(state);\n        }\n      }\n    });\n\n    const send = (component, action, state) => {\n      if (state == null) return;\n      buf.push({ component, state });\n      devTools.send(action, state);\n    }\n\n    app.on('debug', p => {\n      if (devTools_running && p.event) {\n        const state = p.newState;\n        const type = p.event;\n        const payload = p.p;\n        const action = { type, payload };\n        const component = p.component;\n        if (state instanceof Promise) {\n          state.then(s => send(component, action, s));\n        } else {\n          send(component, action, state);\n        }\n      }\n    });\n  }\n}\n"],"sourceRoot":""}