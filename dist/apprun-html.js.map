{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///dist/apprun-html.js","webpack:///webpack/bootstrap 34faa1100aa1f0068c04","webpack:///./src/apprun.ts","webpack:///./src/app.ts","webpack:///./src/decorator.ts","webpack:///./src/vdom-my.ts","webpack:///./src/vdom.ts","webpack:///./src/createComponent.tsx","webpack:///./src/component.ts","webpack:///./src/router.ts","webpack:///./src/apprun-html.ts","webpack:///./src/vdom-html.ts","webpack:///./node_modules/morphdom/dist/morphdom.js"],"names":["root","factory","exports","module","define","amd","self","this","modules","__webpack_require__","moduleId","installedModules","i","l","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","n","__esModule","object","property","prototype","hasOwnProperty","p","s","value","app_1","vdom_1","component_1","Component","router_1","decorator_1","on","update","default","createElement","render","start","element","model","view","options","opts","assign","global_event","component","mount","_app","window","document","addEventListener","App","_events","fn","debug","console","log","push","run","_this","args","_i","arguments","length","subscribers","assert","filter","sub","delay","apply","once","_t","clearTimeout","setTimeout","target","key","descriptor","Reflect","defineMetadata","action","meta","WeakMap","metadataKey","metadataValue","has","set","getMetadataKeys","getPrototypeOf","keys","getMetadata","collect","children","ch","undefined","forEach","Array","isArray","tag","props","__isAppRunComponent","id","idx","createComponent_1","node","firstChild","appendChild","create","same","el","nodeName","toUpperCase","parentNode","replaceChild","len","Math","min","childNodes","child","textContent","nodeType","createText","old","keyCache","removeChild","lastChild","createDocumentFragment","updateProps","indexOf","div","insertAdjacentHTML","substring","createTextNode","JSON","stringify","createElementNS","mergeProps","a","b","cached","ATTR_PROPS","name_1","style","cssText","Fragment","updateElement","html","vdom_my_1","default_1","componentClass","cache","__assign","t","state","_history","_history_idx","renderState","getElementById","rendered","setState","Promise","then","catch","err","error","history","enable_history","concat","callback","prev","next","add_actions","is_global_event","startsWith","add_action","newState","actions","all","split","trim","_a","Router","hash","route","onpopstate","e","location","url","rest","slice","apprun_1","vdom_html_1","morph","innerHTML","toElement","str","range","doc","createRange","selectNode","body","fragment","createContextualFragment","compareNodeNames","fromEl","toEl","fromNodeName","toNodeName","actualize","charCodeAt","namespaceURI","NS_XHTML","moveChildren","curChild","nextChild","nextSibling","morphAttrs","fromNode","toNode","attr","attrName","attrNamespaceURI","attrValue","attrs","attributes","localName","getAttributeNS","setAttributeNS","getAttribute","setAttribute","specified","hasAttributeNS","removeAttributeNS","removeAttribute","syncBooleanAttrProp","noop","defaultGetNodeKey","actualHasAttributeNS","testEl","hasAttribute","getAttributeNode","specialElHandlers","OPTION","INPUT","TEXTAREA","newValue","oldValue","nodeValue","placeholder","SELECT","selectedIndex","ELEMENT_NODE","TEXT_NODE","COMMENT_NODE","morphdom","addKeyedRemoval","keyedRemovalList","walkDiscardedChildNodes","skipKeyedNodes","getNodeKey","onNodeDiscarded","removeNode","onBeforeNodeDiscarded","indexTree","fromNodesLookup","handleNodeAdded","onNodeAdded","unmatchedFromEl","morphEl","childrenOnly","curFromNodeKey","toElKey","isSameNode","onBeforeElUpdated","onElUpdated","onBeforeElChildrenUpdated","curToNodeKey","fromNextSibling","toNextSibling","matchingFromEl","curToNodeChild","curFromNodeChild","outer","curFromNodeType","isCompatible","insertBefore","onBeforeNodeAddedResult","onBeforeNodeAdded","ownerDocument","specialElHandler","toNodeHtml","morphedNode","morphedNodeType","toNodeType","elToRemove"],"mappings":"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","file":"dist/apprun-html.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"apprun\"] = factory();\n\telse\n\t\troot[\"apprun\"] = factory();\n})(typeof self !== 'undefined' ? self : this, function() {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"apprun\"] = factory();\n\telse\n\t\troot[\"apprun\"] = factory();\n})(typeof self !== 'undefined' ? self : this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, {\n/******/ \t\t\t\tconfigurable: false,\n/******/ \t\t\t\tenumerable: true,\n/******/ \t\t\t\tget: getter\n/******/ \t\t\t});\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 8);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar app_1 = __webpack_require__(1);\nvar vdom_1 = __webpack_require__(4);\nvar component_1 = __webpack_require__(6);\nexports.Component = component_1.Component;\nvar router_1 = __webpack_require__(7);\nvar decorator_1 = __webpack_require__(2);\nexports.on = decorator_1.on;\nexports.update = decorator_1.update;\napp_1.default.createElement = vdom_1.createElement;\napp_1.default.render = vdom_1.render;\napp_1.default.start = function (element, model, view, update, options) {\n    var opts = Object.assign(options || {}, { render: true, global_event: true });\n    var component = new component_1.Component(model, view, update);\n    component.mount(element, opts);\n    return component;\n};\nvar _app = app_1.default;\nif (typeof window === 'object') {\n    if (window['app'] && window['app']['start']) {\n        _app = window['app'];\n    }\n    else {\n        window['app'] = _app;\n        document.addEventListener(\"DOMContentLoaded\", function () { return new router_1.default(); });\n    }\n}\nexports.default = _app;\n\n\n/***/ }),\n/* 1 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar App = /** @class */ (function () {\n    function App() {\n        this._events = {};\n    }\n    App.prototype.on = function (name, fn, options) {\n        if (options === void 0) { options = {}; }\n        if (options.debug)\n            console.log('on: ' + name);\n        this._events[name] = this._events[name] || [];\n        this._events[name].push({ fn: fn, options: options });\n    };\n    App.prototype.run = function (name) {\n        var _this = this;\n        var args = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            args[_i - 1] = arguments[_i];\n        }\n        var subscribers = this._events[name];\n        console.assert(!!subscribers, 'No subscriber for event: ' + name);\n        if (subscribers)\n            this._events[name] = subscribers.filter(function (sub) {\n                var fn = sub.fn, options = sub.options;\n                if (options.delay) {\n                    _this.delay(name, fn, args, options);\n                }\n                else {\n                    if (options.debug)\n                        console.log('run: ' + name, args);\n                    fn.apply(_this, args);\n                }\n                return !sub.options.once;\n            });\n    };\n    App.prototype.delay = function (name, fn, args, options) {\n        var _this = this;\n        if (options._t)\n            clearTimeout(options._t);\n        options._t = setTimeout(function () {\n            clearTimeout(options._t);\n            if (options.debug)\n                console.log(\"run-delay \" + options.delay + \":\" + name, args);\n            fn.apply(_this, args);\n        }, options.delay);\n    };\n    return App;\n}());\nexports.App = App;\nexports.default = new App();\n\n\n/***/ }),\n/* 2 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Reflect = {\n    meta: new WeakMap(),\n    defineMetadata: function (metadataKey, metadataValue, target) {\n        if (!this.meta.has(target))\n            this.meta.set(target, {});\n        this.meta.get(target)[metadataKey] = metadataValue;\n    },\n    getMetadataKeys: function (target) {\n        target = Object.getPrototypeOf(target);\n        return this.meta.get(target) ? Object.keys(this.meta.get(target)) : [];\n    },\n    getMetadata: function (metadataKey, target) {\n        target = Object.getPrototypeOf(target);\n        return this.meta.get(target) ? this.meta.get(target)[metadataKey] : null;\n    }\n};\nfunction update(name, options) {\n    if (options === void 0) { options = {}; }\n    return function (target, key, descriptor) {\n        name = \"\" + key + (name ? ',' + name : '');\n        exports.Reflect.defineMetadata(\"apprun-update:\" + name, { name: name, action: [descriptor.value, options] }, target);\n        return descriptor;\n    };\n}\nexports.update = update;\nfunction on(name, options) {\n    if (options === void 0) { options = {}; }\n    return function (target, key) {\n        name = \"\" + key + (name ? ',' + name : '');\n        exports.Reflect.defineMetadata(\"apprun-update:\" + name, { name: name, key: key }, target);\n    };\n}\nexports.on = on;\n\n\n/***/ }),\n/* 3 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar createComponent_1 = __webpack_require__(5);\nvar ATTR_PROPS = '_props';\nfunction collect(children) {\n    var ch = [];\n    var push = function (c) {\n        if (c !== null && c !== undefined && c !== '') {\n            ch.push((typeof c === 'function' || typeof c === 'object') ? c : \"\" + c);\n        }\n    };\n    children && children.forEach(function (c) {\n        if (Array.isArray(c)) {\n            c.forEach(function (i) { return push(i); });\n        }\n        else {\n            push(c);\n        }\n    });\n    return ch;\n}\nfunction createElement(tag, props) {\n    var children = [];\n    for (var _i = 2; _i < arguments.length; _i++) {\n        children[_i - 2] = arguments[_i];\n    }\n    var ch = collect(children);\n    if (typeof tag === 'string')\n        return { tag: tag, props: props, children: ch };\n    else if (tag === undefined && children)\n        return ch; // JSX fragments\n    else if (Object.getPrototypeOf(tag).__isAppRunComponent) {\n        var id = props && props['id'] || \"_\" + tag.name + \"_\" + ++idx;\n        return createComponent_1.default(tag, id, props);\n    }\n    else\n        return tag(props, ch);\n}\nexports.createElement = createElement;\n;\nvar idx = 0;\nvar keyCache = {};\nexports.updateElement = render;\nfunction render(element, node) {\n    // console.log('render', element, node);\n    idx = 0;\n    if (!node || !element)\n        return;\n    if (!element.firstChild) {\n        element.appendChild(create(node));\n    }\n    else {\n        update(element.firstChild, node);\n    }\n}\nexports.render = render;\nfunction same(el, node) {\n    // if (!el || !node) return false;\n    var key1 = el.nodeName;\n    var key2 = \"\" + (node.tag || '');\n    return key1 === key2.toUpperCase();\n}\nfunction update(element, node) {\n    console.assert(!!element);\n    //console.log('update', element, node);\n    if (!same(element, node)) {\n        element.parentNode.replaceChild(create(node), element);\n        return;\n    }\n    var len = Math.min(element.childNodes.length, node.children.length);\n    for (var i = 0; i < len; i++) {\n        var child = node.children[i];\n        var el = element.childNodes[i];\n        if (typeof child === 'string') {\n            if (el.textContent !== child) {\n                if (el.nodeType === 3) {\n                    el.textContent = child;\n                }\n                else {\n                    element.replaceChild(createText(child), el);\n                }\n            }\n        }\n        else {\n            var key = child.props && child.props['key'];\n            if (key) {\n                if (el.key === key) {\n                    update(element.childNodes[i], child);\n                }\n                else {\n                    var old = key && keyCache[key];\n                    if (old) {\n                        element.replaceChild(old, el);\n                        element.appendChild(el);\n                        update(element.childNodes[i], child);\n                    }\n                    else {\n                        element.appendChild(create(node), el);\n                        update(element.childNodes[i], child);\n                    }\n                }\n            }\n            else {\n                update(element.childNodes[i], child);\n            }\n        }\n    }\n    var n = element.childNodes.length;\n    while (n > len) {\n        element.removeChild(element.lastChild);\n        n--;\n    }\n    if (node.children.length > len) {\n        var d = document.createDocumentFragment();\n        for (var i = len; i < node.children.length; i++) {\n            d.appendChild(create(node.children[i]));\n        }\n        element.appendChild(d);\n    }\n    updateProps(element, node.props);\n}\nfunction createText(node) {\n    if (node.indexOf('_html:') === 0) {\n        var div = document.createElement('div');\n        div.insertAdjacentHTML('afterbegin', node.substring(6));\n        return div;\n    }\n    else {\n        return document.createTextNode(node);\n    }\n}\nfunction create(node) {\n    console.assert(node !== null && node !== undefined);\n    // console.log('create', node, typeof node);\n    if (typeof node === \"string\")\n        return createText(node);\n    if (!node.tag)\n        return createText(JSON.stringify(node));\n    var element = (node.tag === \"svg\")\n        ? document.createElementNS(\"http://www.w3.org/2000/svg\", node.tag)\n        : document.createElement(node.tag);\n    updateProps(element, node.props);\n    if (node.children)\n        node.children.forEach(function (child) { return element.appendChild(create(child)); });\n    return element;\n}\nfunction mergeProps(a, b) {\n    var props = {};\n    if (a)\n        Object.keys(a).forEach(function (p) { return props[p] = ''; });\n    if (b)\n        Object.keys(b).forEach(function (p) { return props[p] = b[p]; });\n    return props;\n}\nfunction updateProps(element, props) {\n    console.assert(!!element);\n    // console.log('updateProps', element, props);\n    var cached = element[ATTR_PROPS] || {};\n    props = mergeProps(cached, props);\n    element[ATTR_PROPS] = props;\n    for (var name_1 in props) {\n        var value = props[name_1];\n        if (cached[name_1] === value)\n            continue;\n        // console.log('updateProps', name, value);\n        if (name_1 === 'style') {\n            if (element.style.cssText)\n                element.style.cssText = '';\n            for (var s in value) {\n                if (element.style[s] !== value[s])\n                    element.style[s] = value[s];\n            }\n        }\n        else {\n            if (element[name_1] !== value)\n                element[name_1] = value;\n            if (name_1 === 'key' && value)\n                keyCache[value] = element;\n        }\n    }\n}\nfunction Fragment(props) {\n    var children = [];\n    for (var _i = 1; _i < arguments.length; _i++) {\n        children[_i - 1] = arguments[_i];\n    }\n    return collect(children);\n}\nexports.Fragment = Fragment;\n\n\n/***/ }),\n/* 4 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar vdom_my_1 = __webpack_require__(3);\nexports.createElement = vdom_my_1.createElement;\nfunction render(element, html) {\n    console.assert(!!element);\n    vdom_my_1.updateElement(element, html);\n}\nexports.render = render;\n\n\n/***/ }),\n/* 5 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar app_1 = __webpack_require__(1);\nvar cache = {};\nfunction default_1(componentClass, id, props) {\n    var component = cache[id] ? cache[id] :\n        (cache[id] = new componentClass(props).mount(id));\n    return app_1.default.createElement(\"div\", { id: id }, component.render && component.render());\n}\nexports.default = default_1;\n\n\n/***/ }),\n/* 6 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nvar __assign = (this && this.__assign) || Object.assign || function(t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n        s = arguments[i];\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n            t[p] = s[p];\n    }\n    return t;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar app_1 = __webpack_require__(1);\nvar decorator_1 = __webpack_require__(2);\nvar Component = /** @class */ (function () {\n    function Component(state, view, update, options) {\n        var _this = this;\n        this.state = state;\n        this.view = view;\n        this.update = update;\n        this.options = options;\n        this._app = new app_1.App();\n        this._history = [];\n        this._history_idx = -1;\n        this.start = function (element, options) {\n            if (element === void 0) { element = null; }\n            if (options === void 0) { options = { render: true }; }\n            return _this.mount(element, __assign({}, options, { render: true }));\n        };\n        this.render = function () { return _this.view(_this.state); };\n    }\n    Component.prototype.renderState = function (state) {\n        if (!this.view)\n            return;\n        var html = this.view(state);\n        var el = (typeof this.element === 'string') ?\n            document.getElementById(this.element) : this.element;\n        if (el)\n            el['_component'] = this;\n        if (el && app_1.default.render) {\n            app_1.default.render(el, html);\n            if (this.rendered)\n                (this.rendered(this.state));\n        }\n    };\n    Component.prototype.setState = function (state, options) {\n        var _this = this;\n        if (state instanceof Promise) {\n            // Promise will not be saved nor rendered saved\n            // state will be saved and rendered when promise is resolved\n            state.then(function (s) {\n                _this.setState(s, options);\n            }).catch(function (err) {\n                console.error(err);\n                throw err;\n            });\n        }\n        else {\n            if (state == null)\n                return;\n            this.state = state;\n            if (options.render !== false)\n                this.renderState(state);\n            if (options.history !== false && this.enable_history) {\n                this._history = this._history.concat([state]);\n                this._history_idx = this._history.length - 1;\n            }\n            if (typeof options.callback === 'function')\n                options.callback(this.state);\n        }\n    };\n    Component.prototype.mount = function (element, options) {\n        var _this = this;\n        if (element === void 0) { element = null; }\n        console.assert(!this.element, 'Component already mounted.');\n        this.options = options = Object.assign(this.options || {}, options);\n        this.element = element;\n        this.global_event = options.global_event;\n        this.enable_history = !!options.history;\n        if (this.enable_history) {\n            var prev = function () {\n                _this._history_idx--;\n                if (_this._history_idx >= 0) {\n                    _this.setState(_this._history[_this._history_idx], { render: true, history: false });\n                }\n                else {\n                    _this._history_idx = 0;\n                }\n            };\n            var next = function () {\n                _this._history_idx++;\n                if (_this._history_idx < _this._history.length) {\n                    _this.setState(_this._history[_this._history_idx], { render: true, history: false });\n                }\n                else {\n                    _this._history_idx = _this._history.length - 1;\n                }\n            };\n            this.on(options.history.prev || 'history-prev', prev);\n            this.on(options.history.next || 'history-next', next);\n        }\n        this.add_actions();\n        if (this.state === undefined)\n            this.state = this['model'] || {};\n        if (options.render) {\n            this.setState(this.state, { render: true, history: true });\n        }\n        else {\n            this.setState(this.state, { render: false, history: true });\n        }\n        return this;\n    };\n    Component.prototype.is_global_event = function (name) {\n        return name && (name.startsWith('#') || name.startsWith('/'));\n    };\n    Component.prototype.add_action = function (name, action, options) {\n        var _this = this;\n        if (options === void 0) { options = {}; }\n        if (!action || typeof action !== 'function')\n            return;\n        this.on(name, function () {\n            var p = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                p[_i] = arguments[_i];\n            }\n            var newState = action.apply(void 0, [_this.state].concat(p));\n            _this.setState(newState, options);\n        }, options);\n    };\n    Component.prototype.add_actions = function () {\n        var _this = this;\n        var actions = this.update || {};\n        decorator_1.Reflect.getMetadataKeys(this).forEach(function (key) {\n            if (key.startsWith('apprun-update:')) {\n                var meta = decorator_1.Reflect.getMetadata(key, _this);\n                actions[meta.name] = meta.action || _this[meta.key];\n            }\n        });\n        var all = {};\n        Object.keys(actions).forEach(function (name) {\n            var action = actions[name];\n            if (typeof action === 'function' || Array.isArray(action)) {\n                name.split(',').forEach(function (n) { return all[n.trim()] = action; });\n            }\n        });\n        Object.keys(all).forEach(function (name) {\n            var action = all[name];\n            if (typeof action === 'function') {\n                _this.add_action(name, action);\n            }\n            else if (Array.isArray(action)) {\n                _this.add_action(name, action[0], action[1]);\n            }\n        });\n    };\n    Component.prototype.run = function (name) {\n        var args = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            args[_i - 1] = arguments[_i];\n        }\n        return this.global_event || this.is_global_event(name) ? app_1.default.run.apply(app_1.default, [name].concat(args)) : (_a = this._app).run.apply(_a, [name].concat(args));\n        var _a;\n    };\n    Component.prototype.on = function (name, fn, options) {\n        return this.global_event || this.is_global_event(name) ?\n            app_1.default.on(name, fn, options) :\n            this._app.on(name, fn, options);\n    };\n    Component.__isAppRunComponent = true;\n    return Component;\n}());\nexports.Component = Component;\n\n\n/***/ }),\n/* 7 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar app_1 = __webpack_require__(1);\nvar ROUTER_EVENT = '//';\nvar Router = /** @class */ (function () {\n    function Router() {\n        var _this = this;\n        app_1.default.on('route', function (hash) { return _this.route(hash); });\n        window.onpopstate = function (e) { return _this.route(location.hash); };\n        this.route(location.hash);\n    }\n    Router.prototype.route = function (url) {\n        if (!url)\n            url = '#';\n        if (url.indexOf('/') > 0) {\n            var _a = url.split('/'), name_1 = _a[0], rest = _a.slice(1);\n            app_1.default.run.apply(app_1.default, [name_1].concat(rest));\n            app_1.default.run.apply(app_1.default, [ROUTER_EVENT, name_1].concat(rest));\n        }\n        else {\n            app_1.default.run(url);\n            app_1.default.run(ROUTER_EVENT, url);\n        }\n    };\n    return Router;\n}());\nexports.default = Router;\n\n\n/***/ }),\n/* 8 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar apprun_1 = __webpack_require__(0);\nexports.Component = apprun_1.Component;\nvar vdom_html_1 = __webpack_require__(9);\napprun_1.default.createElement = vdom_html_1.createElement;\napprun_1.default.render = vdom_html_1.render;\nexports.default = apprun_1.default;\n\n\n/***/ }),\n/* 9 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar vdom_my_1 = __webpack_require__(3);\nexports.createElement = vdom_my_1.createElement;\nvar morph = __webpack_require__(10);\nfunction render(element, html) {\n    console.assert(!!element);\n    if (typeof html === 'string') {\n        if (element.firstChild) {\n            morph(element.firstChild, html);\n        }\n        else {\n            element.innerHTML = html;\n        }\n    }\n    else {\n        vdom_my_1.updateElement(element, html);\n    }\n}\nexports.render = render;\n\n\n/***/ }),\n/* 10 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nvar range; // Create a range object for efficently rendering strings to elements.\nvar NS_XHTML = 'http://www.w3.org/1999/xhtml';\n\nvar doc = typeof document === 'undefined' ? undefined : document;\n\nvar testEl = doc ?\n    doc.body || doc.createElement('div') :\n    {};\n\n// Fixes <https://github.com/patrick-steele-idem/morphdom/issues/32>\n// (IE7+ support) <=IE7 does not support el.hasAttribute(name)\nvar actualHasAttributeNS;\n\nif (testEl.hasAttributeNS) {\n    actualHasAttributeNS = function(el, namespaceURI, name) {\n        return el.hasAttributeNS(namespaceURI, name);\n    };\n} else if (testEl.hasAttribute) {\n    actualHasAttributeNS = function(el, namespaceURI, name) {\n        return el.hasAttribute(name);\n    };\n} else {\n    actualHasAttributeNS = function(el, namespaceURI, name) {\n        return el.getAttributeNode(namespaceURI, name) != null;\n    };\n}\n\nvar hasAttributeNS = actualHasAttributeNS;\n\n\nfunction toElement(str) {\n    if (!range && doc.createRange) {\n        range = doc.createRange();\n        range.selectNode(doc.body);\n    }\n\n    var fragment;\n    if (range && range.createContextualFragment) {\n        fragment = range.createContextualFragment(str);\n    } else {\n        fragment = doc.createElement('body');\n        fragment.innerHTML = str;\n    }\n    return fragment.childNodes[0];\n}\n\n/**\n * Returns true if two node's names are the same.\n *\n * NOTE: We don't bother checking `namespaceURI` because you will never find two HTML elements with the same\n *       nodeName and different namespace URIs.\n *\n * @param {Element} a\n * @param {Element} b The target element\n * @return {boolean}\n */\nfunction compareNodeNames(fromEl, toEl) {\n    var fromNodeName = fromEl.nodeName;\n    var toNodeName = toEl.nodeName;\n\n    if (fromNodeName === toNodeName) {\n        return true;\n    }\n\n    if (toEl.actualize &&\n        fromNodeName.charCodeAt(0) < 91 && /* from tag name is upper case */\n        toNodeName.charCodeAt(0) > 90 /* target tag name is lower case */) {\n        // If the target element is a virtual DOM node then we may need to normalize the tag name\n        // before comparing. Normal HTML elements that are in the \"http://www.w3.org/1999/xhtml\"\n        // are converted to upper case\n        return fromNodeName === toNodeName.toUpperCase();\n    } else {\n        return false;\n    }\n}\n\n/**\n * Create an element, optionally with a known namespace URI.\n *\n * @param {string} name the element name, e.g. 'div' or 'svg'\n * @param {string} [namespaceURI] the element's namespace URI, i.e. the value of\n * its `xmlns` attribute or its inferred namespace.\n *\n * @return {Element}\n */\nfunction createElementNS(name, namespaceURI) {\n    return !namespaceURI || namespaceURI === NS_XHTML ?\n        doc.createElement(name) :\n        doc.createElementNS(namespaceURI, name);\n}\n\n/**\n * Copies the children of one DOM element to another DOM element\n */\nfunction moveChildren(fromEl, toEl) {\n    var curChild = fromEl.firstChild;\n    while (curChild) {\n        var nextChild = curChild.nextSibling;\n        toEl.appendChild(curChild);\n        curChild = nextChild;\n    }\n    return toEl;\n}\n\nfunction morphAttrs(fromNode, toNode) {\n    var attrs = toNode.attributes;\n    var i;\n    var attr;\n    var attrName;\n    var attrNamespaceURI;\n    var attrValue;\n    var fromValue;\n\n    for (i = attrs.length - 1; i >= 0; --i) {\n        attr = attrs[i];\n        attrName = attr.name;\n        attrNamespaceURI = attr.namespaceURI;\n        attrValue = attr.value;\n\n        if (attrNamespaceURI) {\n            attrName = attr.localName || attrName;\n            fromValue = fromNode.getAttributeNS(attrNamespaceURI, attrName);\n\n            if (fromValue !== attrValue) {\n                fromNode.setAttributeNS(attrNamespaceURI, attrName, attrValue);\n            }\n        } else {\n            fromValue = fromNode.getAttribute(attrName);\n\n            if (fromValue !== attrValue) {\n                fromNode.setAttribute(attrName, attrValue);\n            }\n        }\n    }\n\n    // Remove any extra attributes found on the original DOM element that\n    // weren't found on the target element.\n    attrs = fromNode.attributes;\n\n    for (i = attrs.length - 1; i >= 0; --i) {\n        attr = attrs[i];\n        if (attr.specified !== false) {\n            attrName = attr.name;\n            attrNamespaceURI = attr.namespaceURI;\n\n            if (attrNamespaceURI) {\n                attrName = attr.localName || attrName;\n\n                if (!hasAttributeNS(toNode, attrNamespaceURI, attrName)) {\n                    fromNode.removeAttributeNS(attrNamespaceURI, attrName);\n                }\n            } else {\n                if (!hasAttributeNS(toNode, null, attrName)) {\n                    fromNode.removeAttribute(attrName);\n                }\n            }\n        }\n    }\n}\n\nfunction syncBooleanAttrProp(fromEl, toEl, name) {\n    if (fromEl[name] !== toEl[name]) {\n        fromEl[name] = toEl[name];\n        if (fromEl[name]) {\n            fromEl.setAttribute(name, '');\n        } else {\n            fromEl.removeAttribute(name, '');\n        }\n    }\n}\n\nvar specialElHandlers = {\n    /**\n     * Needed for IE. Apparently IE doesn't think that \"selected\" is an\n     * attribute when reading over the attributes using selectEl.attributes\n     */\n    OPTION: function(fromEl, toEl) {\n        syncBooleanAttrProp(fromEl, toEl, 'selected');\n    },\n    /**\n     * The \"value\" attribute is special for the <input> element since it sets\n     * the initial value. Changing the \"value\" attribute without changing the\n     * \"value\" property will have no effect since it is only used to the set the\n     * initial value.  Similar for the \"checked\" attribute, and \"disabled\".\n     */\n    INPUT: function(fromEl, toEl) {\n        syncBooleanAttrProp(fromEl, toEl, 'checked');\n        syncBooleanAttrProp(fromEl, toEl, 'disabled');\n\n        if (fromEl.value !== toEl.value) {\n            fromEl.value = toEl.value;\n        }\n\n        if (!hasAttributeNS(toEl, null, 'value')) {\n            fromEl.removeAttribute('value');\n        }\n    },\n\n    TEXTAREA: function(fromEl, toEl) {\n        var newValue = toEl.value;\n        if (fromEl.value !== newValue) {\n            fromEl.value = newValue;\n        }\n\n        var firstChild = fromEl.firstChild;\n        if (firstChild) {\n            // Needed for IE. Apparently IE sets the placeholder as the\n            // node value and vise versa. This ignores an empty update.\n            var oldValue = firstChild.nodeValue;\n\n            if (oldValue == newValue || (!newValue && oldValue == fromEl.placeholder)) {\n                return;\n            }\n\n            firstChild.nodeValue = newValue;\n        }\n    },\n    SELECT: function(fromEl, toEl) {\n        if (!hasAttributeNS(toEl, null, 'multiple')) {\n            var selectedIndex = -1;\n            var i = 0;\n            var curChild = toEl.firstChild;\n            while(curChild) {\n                var nodeName = curChild.nodeName;\n                if (nodeName && nodeName.toUpperCase() === 'OPTION') {\n                    if (hasAttributeNS(curChild, null, 'selected')) {\n                        selectedIndex = i;\n                        break;\n                    }\n                    i++;\n                }\n                curChild = curChild.nextSibling;\n            }\n\n            fromEl.selectedIndex = i;\n        }\n    }\n};\n\nvar ELEMENT_NODE = 1;\nvar TEXT_NODE = 3;\nvar COMMENT_NODE = 8;\n\nfunction noop() {}\n\nfunction defaultGetNodeKey(node) {\n    return node.id;\n}\n\nfunction morphdomFactory(morphAttrs) {\n\n    return function morphdom(fromNode, toNode, options) {\n        if (!options) {\n            options = {};\n        }\n\n        if (typeof toNode === 'string') {\n            if (fromNode.nodeName === '#document' || fromNode.nodeName === 'HTML') {\n                var toNodeHtml = toNode;\n                toNode = doc.createElement('html');\n                toNode.innerHTML = toNodeHtml;\n            } else {\n                toNode = toElement(toNode);\n            }\n        }\n\n        var getNodeKey = options.getNodeKey || defaultGetNodeKey;\n        var onBeforeNodeAdded = options.onBeforeNodeAdded || noop;\n        var onNodeAdded = options.onNodeAdded || noop;\n        var onBeforeElUpdated = options.onBeforeElUpdated || noop;\n        var onElUpdated = options.onElUpdated || noop;\n        var onBeforeNodeDiscarded = options.onBeforeNodeDiscarded || noop;\n        var onNodeDiscarded = options.onNodeDiscarded || noop;\n        var onBeforeElChildrenUpdated = options.onBeforeElChildrenUpdated || noop;\n        var childrenOnly = options.childrenOnly === true;\n\n        // This object is used as a lookup to quickly find all keyed elements in the original DOM tree.\n        var fromNodesLookup = {};\n        var keyedRemovalList;\n\n        function addKeyedRemoval(key) {\n            if (keyedRemovalList) {\n                keyedRemovalList.push(key);\n            } else {\n                keyedRemovalList = [key];\n            }\n        }\n\n        function walkDiscardedChildNodes(node, skipKeyedNodes) {\n            if (node.nodeType === ELEMENT_NODE) {\n                var curChild = node.firstChild;\n                while (curChild) {\n\n                    var key = undefined;\n\n                    if (skipKeyedNodes && (key = getNodeKey(curChild))) {\n                        // If we are skipping keyed nodes then we add the key\n                        // to a list so that it can be handled at the very end.\n                        addKeyedRemoval(key);\n                    } else {\n                        // Only report the node as discarded if it is not keyed. We do this because\n                        // at the end we loop through all keyed elements that were unmatched\n                        // and then discard them in one final pass.\n                        onNodeDiscarded(curChild);\n                        if (curChild.firstChild) {\n                            walkDiscardedChildNodes(curChild, skipKeyedNodes);\n                        }\n                    }\n\n                    curChild = curChild.nextSibling;\n                }\n            }\n        }\n\n        /**\n         * Removes a DOM node out of the original DOM\n         *\n         * @param  {Node} node The node to remove\n         * @param  {Node} parentNode The nodes parent\n         * @param  {Boolean} skipKeyedNodes If true then elements with keys will be skipped and not discarded.\n         * @return {undefined}\n         */\n        function removeNode(node, parentNode, skipKeyedNodes) {\n            if (onBeforeNodeDiscarded(node) === false) {\n                return;\n            }\n\n            if (parentNode) {\n                parentNode.removeChild(node);\n            }\n\n            onNodeDiscarded(node);\n            walkDiscardedChildNodes(node, skipKeyedNodes);\n        }\n\n        // // TreeWalker implementation is no faster, but keeping this around in case this changes in the future\n        // function indexTree(root) {\n        //     var treeWalker = document.createTreeWalker(\n        //         root,\n        //         NodeFilter.SHOW_ELEMENT);\n        //\n        //     var el;\n        //     while((el = treeWalker.nextNode())) {\n        //         var key = getNodeKey(el);\n        //         if (key) {\n        //             fromNodesLookup[key] = el;\n        //         }\n        //     }\n        // }\n\n        // // NodeIterator implementation is no faster, but keeping this around in case this changes in the future\n        //\n        // function indexTree(node) {\n        //     var nodeIterator = document.createNodeIterator(node, NodeFilter.SHOW_ELEMENT);\n        //     var el;\n        //     while((el = nodeIterator.nextNode())) {\n        //         var key = getNodeKey(el);\n        //         if (key) {\n        //             fromNodesLookup[key] = el;\n        //         }\n        //     }\n        // }\n\n        function indexTree(node) {\n            if (node.nodeType === ELEMENT_NODE) {\n                var curChild = node.firstChild;\n                while (curChild) {\n                    var key = getNodeKey(curChild);\n                    if (key) {\n                        fromNodesLookup[key] = curChild;\n                    }\n\n                    // Walk recursively\n                    indexTree(curChild);\n\n                    curChild = curChild.nextSibling;\n                }\n            }\n        }\n\n        indexTree(fromNode);\n\n        function handleNodeAdded(el) {\n            onNodeAdded(el);\n\n            var curChild = el.firstChild;\n            while (curChild) {\n                var nextSibling = curChild.nextSibling;\n\n                var key = getNodeKey(curChild);\n                if (key) {\n                    var unmatchedFromEl = fromNodesLookup[key];\n                    if (unmatchedFromEl && compareNodeNames(curChild, unmatchedFromEl)) {\n                        curChild.parentNode.replaceChild(unmatchedFromEl, curChild);\n                        morphEl(unmatchedFromEl, curChild);\n                    }\n                }\n\n                handleNodeAdded(curChild);\n                curChild = nextSibling;\n            }\n        }\n\n        function morphEl(fromEl, toEl, childrenOnly) {\n            var toElKey = getNodeKey(toEl);\n            var curFromNodeKey;\n\n            if (toElKey) {\n                // If an element with an ID is being morphed then it is will be in the final\n                // DOM so clear it out of the saved elements collection\n                delete fromNodesLookup[toElKey];\n            }\n\n            if (toNode.isSameNode && toNode.isSameNode(fromNode)) {\n                return;\n            }\n\n            if (!childrenOnly) {\n                if (onBeforeElUpdated(fromEl, toEl) === false) {\n                    return;\n                }\n\n                morphAttrs(fromEl, toEl);\n                onElUpdated(fromEl);\n\n                if (onBeforeElChildrenUpdated(fromEl, toEl) === false) {\n                    return;\n                }\n            }\n\n            if (fromEl.nodeName !== 'TEXTAREA') {\n                var curToNodeChild = toEl.firstChild;\n                var curFromNodeChild = fromEl.firstChild;\n                var curToNodeKey;\n\n                var fromNextSibling;\n                var toNextSibling;\n                var matchingFromEl;\n\n                outer: while (curToNodeChild) {\n                    toNextSibling = curToNodeChild.nextSibling;\n                    curToNodeKey = getNodeKey(curToNodeChild);\n\n                    while (curFromNodeChild) {\n                        fromNextSibling = curFromNodeChild.nextSibling;\n\n                        if (curToNodeChild.isSameNode && curToNodeChild.isSameNode(curFromNodeChild)) {\n                            curToNodeChild = toNextSibling;\n                            curFromNodeChild = fromNextSibling;\n                            continue outer;\n                        }\n\n                        curFromNodeKey = getNodeKey(curFromNodeChild);\n\n                        var curFromNodeType = curFromNodeChild.nodeType;\n\n                        var isCompatible = undefined;\n\n                        if (curFromNodeType === curToNodeChild.nodeType) {\n                            if (curFromNodeType === ELEMENT_NODE) {\n                                // Both nodes being compared are Element nodes\n\n                                if (curToNodeKey) {\n                                    // The target node has a key so we want to match it up with the correct element\n                                    // in the original DOM tree\n                                    if (curToNodeKey !== curFromNodeKey) {\n                                        // The current element in the original DOM tree does not have a matching key so\n                                        // let's check our lookup to see if there is a matching element in the original\n                                        // DOM tree\n                                        if ((matchingFromEl = fromNodesLookup[curToNodeKey])) {\n                                            if (curFromNodeChild.nextSibling === matchingFromEl) {\n                                                // Special case for single element removals. To avoid removing the original\n                                                // DOM node out of the tree (since that can break CSS transitions, etc.),\n                                                // we will instead discard the current node and wait until the next\n                                                // iteration to properly match up the keyed target element with its matching\n                                                // element in the original tree\n                                                isCompatible = false;\n                                            } else {\n                                                // We found a matching keyed element somewhere in the original DOM tree.\n                                                // Let's moving the original DOM node into the current position and morph\n                                                // it.\n\n                                                // NOTE: We use insertBefore instead of replaceChild because we want to go through\n                                                // the `removeNode()` function for the node that is being discarded so that\n                                                // all lifecycle hooks are correctly invoked\n                                                fromEl.insertBefore(matchingFromEl, curFromNodeChild);\n\n                                                fromNextSibling = curFromNodeChild.nextSibling;\n\n                                                if (curFromNodeKey) {\n                                                    // Since the node is keyed it might be matched up later so we defer\n                                                    // the actual removal to later\n                                                    addKeyedRemoval(curFromNodeKey);\n                                                } else {\n                                                    // NOTE: we skip nested keyed nodes from being removed since there is\n                                                    //       still a chance they will be matched up later\n                                                    removeNode(curFromNodeChild, fromEl, true /* skip keyed nodes */);\n                                                }\n\n                                                curFromNodeChild = matchingFromEl;\n                                            }\n                                        } else {\n                                            // The nodes are not compatible since the \"to\" node has a key and there\n                                            // is no matching keyed node in the source tree\n                                            isCompatible = false;\n                                        }\n                                    }\n                                } else if (curFromNodeKey) {\n                                    // The original has a key\n                                    isCompatible = false;\n                                }\n\n                                isCompatible = isCompatible !== false && compareNodeNames(curFromNodeChild, curToNodeChild);\n                                if (isCompatible) {\n                                    // We found compatible DOM elements so transform\n                                    // the current \"from\" node to match the current\n                                    // target DOM node.\n                                    morphEl(curFromNodeChild, curToNodeChild);\n                                }\n\n                            } else if (curFromNodeType === TEXT_NODE || curFromNodeType == COMMENT_NODE) {\n                                // Both nodes being compared are Text or Comment nodes\n                                isCompatible = true;\n                                // Simply update nodeValue on the original node to\n                                // change the text value\n                                if (curFromNodeChild.nodeValue !== curToNodeChild.nodeValue) {\n                                    curFromNodeChild.nodeValue = curToNodeChild.nodeValue;\n                                }\n\n                            }\n                        }\n\n                        if (isCompatible) {\n                            // Advance both the \"to\" child and the \"from\" child since we found a match\n                            curToNodeChild = toNextSibling;\n                            curFromNodeChild = fromNextSibling;\n                            continue outer;\n                        }\n\n                        // No compatible match so remove the old node from the DOM and continue trying to find a\n                        // match in the original DOM. However, we only do this if the from node is not keyed\n                        // since it is possible that a keyed node might match up with a node somewhere else in the\n                        // target tree and we don't want to discard it just yet since it still might find a\n                        // home in the final DOM tree. After everything is done we will remove any keyed nodes\n                        // that didn't find a home\n                        if (curFromNodeKey) {\n                            // Since the node is keyed it might be matched up later so we defer\n                            // the actual removal to later\n                            addKeyedRemoval(curFromNodeKey);\n                        } else {\n                            // NOTE: we skip nested keyed nodes from being removed since there is\n                            //       still a chance they will be matched up later\n                            removeNode(curFromNodeChild, fromEl, true /* skip keyed nodes */);\n                        }\n\n                        curFromNodeChild = fromNextSibling;\n                    }\n\n                    // If we got this far then we did not find a candidate match for\n                    // our \"to node\" and we exhausted all of the children \"from\"\n                    // nodes. Therefore, we will just append the current \"to\" node\n                    // to the end\n                    if (curToNodeKey && (matchingFromEl = fromNodesLookup[curToNodeKey]) && compareNodeNames(matchingFromEl, curToNodeChild)) {\n                        fromEl.appendChild(matchingFromEl);\n                        morphEl(matchingFromEl, curToNodeChild);\n                    } else {\n                        var onBeforeNodeAddedResult = onBeforeNodeAdded(curToNodeChild);\n                        if (onBeforeNodeAddedResult !== false) {\n                            if (onBeforeNodeAddedResult) {\n                                curToNodeChild = onBeforeNodeAddedResult;\n                            }\n\n                            if (curToNodeChild.actualize) {\n                                curToNodeChild = curToNodeChild.actualize(fromEl.ownerDocument || doc);\n                            }\n                            fromEl.appendChild(curToNodeChild);\n                            handleNodeAdded(curToNodeChild);\n                        }\n                    }\n\n                    curToNodeChild = toNextSibling;\n                    curFromNodeChild = fromNextSibling;\n                }\n\n                // We have processed all of the \"to nodes\". If curFromNodeChild is\n                // non-null then we still have some from nodes left over that need\n                // to be removed\n                while (curFromNodeChild) {\n                    fromNextSibling = curFromNodeChild.nextSibling;\n                    if ((curFromNodeKey = getNodeKey(curFromNodeChild))) {\n                        // Since the node is keyed it might be matched up later so we defer\n                        // the actual removal to later\n                        addKeyedRemoval(curFromNodeKey);\n                    } else {\n                        // NOTE: we skip nested keyed nodes from being removed since there is\n                        //       still a chance they will be matched up later\n                        removeNode(curFromNodeChild, fromEl, true /* skip keyed nodes */);\n                    }\n                    curFromNodeChild = fromNextSibling;\n                }\n            }\n\n            var specialElHandler = specialElHandlers[fromEl.nodeName];\n            if (specialElHandler) {\n                specialElHandler(fromEl, toEl);\n            }\n        } // END: morphEl(...)\n\n        var morphedNode = fromNode;\n        var morphedNodeType = morphedNode.nodeType;\n        var toNodeType = toNode.nodeType;\n\n        if (!childrenOnly) {\n            // Handle the case where we are given two DOM nodes that are not\n            // compatible (e.g. <div> --> <span> or <div> --> TEXT)\n            if (morphedNodeType === ELEMENT_NODE) {\n                if (toNodeType === ELEMENT_NODE) {\n                    if (!compareNodeNames(fromNode, toNode)) {\n                        onNodeDiscarded(fromNode);\n                        morphedNode = moveChildren(fromNode, createElementNS(toNode.nodeName, toNode.namespaceURI));\n                    }\n                } else {\n                    // Going from an element node to a text node\n                    morphedNode = toNode;\n                }\n            } else if (morphedNodeType === TEXT_NODE || morphedNodeType === COMMENT_NODE) { // Text or comment node\n                if (toNodeType === morphedNodeType) {\n                    if (morphedNode.nodeValue !== toNode.nodeValue) {\n                        morphedNode.nodeValue = toNode.nodeValue;\n                    }\n\n                    return morphedNode;\n                } else {\n                    // Text node to something else\n                    morphedNode = toNode;\n                }\n            }\n        }\n\n        if (morphedNode === toNode) {\n            // The \"to node\" was not compatible with the \"from node\" so we had to\n            // toss out the \"from node\" and use the \"to node\"\n            onNodeDiscarded(fromNode);\n        } else {\n            morphEl(morphedNode, toNode, childrenOnly);\n\n            // We now need to loop over any keyed nodes that might need to be\n            // removed. We only do the removal if we know that the keyed node\n            // never found a match. When a keyed node is matched up we remove\n            // it out of fromNodesLookup and we use fromNodesLookup to determine\n            // if a keyed node has been matched up or not\n            if (keyedRemovalList) {\n                for (var i=0, len=keyedRemovalList.length; i<len; i++) {\n                    var elToRemove = fromNodesLookup[keyedRemovalList[i]];\n                    if (elToRemove) {\n                        removeNode(elToRemove, elToRemove.parentNode, false);\n                    }\n                }\n            }\n        }\n\n        if (!childrenOnly && morphedNode !== fromNode && fromNode.parentNode) {\n            if (morphedNode.actualize) {\n                morphedNode = morphedNode.actualize(fromNode.ownerDocument || doc);\n            }\n            // If we had to swap out the from node with a new node because the old\n            // node was not compatible with the target node then we need to\n            // replace the old DOM node in the original DOM tree. This is only\n            // possible if the original DOM node was part of a DOM tree which\n            // we know is the case if it has a parent node.\n            fromNode.parentNode.replaceChild(morphedNode, fromNode);\n        }\n\n        return morphedNode;\n    };\n}\n\nvar morphdom = morphdomFactory(morphAttrs);\n\nmodule.exports = morphdom;\n\n\n/***/ })\n/******/ ]);\n});\n\n\n// WEBPACK FOOTER //\n// dist/apprun-html.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 8);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 34faa1100aa1f0068c04","import app from './app';\nimport { createElement, render } from './vdom';\nimport { Component } from './component';\nimport Router from './router';\nimport { on, update } from './decorator';\n\nexport type Model = any;\nexport type View = (model: Model) => string | Function;\nexport type Action = (model: Model, ...p) => Model;\nexport type Update = { [name: string]: Action | {}[] };\n\napp.createElement = createElement;\napp.render = render;\n\napp.start = (element: HTMLElement | string, model: Model, view: View, update: Update, options?: { history }) => {\n  const opts = Object.assign(options || {}, { render: true, global_event: true} )\n  const component = new Component(model, view, update);\n  component.mount(element, opts);\n  return component;\n}\n\nlet _app = app;\nif (typeof window === 'object') {\n  if (window['app'] && window['app']['start']) {\n    _app = window['app'];\n  } else {\n    window['app'] = _app;\n    document.addEventListener(\"DOMContentLoaded\", () => new Router());\n  }\n}\n\nexport default _app;\nexport { Component, on, update };\n\n\n// WEBPACK FOOTER //\n// ./src/apprun.ts","export class App {\n\n  private _events: Object;\n\n  public start;\n  public createElement;\n  public render;\n\n  constructor() {\n    this._events = {};\n  }\n\n  on(name: string, fn: (...args) => void, options: any = {}) {\n    if (options.debug) console.log('on: ' + name);\n    this._events[name] = this._events[name] || [];\n    this._events[name].push({ fn: fn, options: options });\n  }\n\n  run(name: string, ...args) {\n    const subscribers = this._events[name];\n    console.assert(!!subscribers, 'No subscriber for event: ' + name);\n    if (subscribers) this._events[name] = subscribers.filter((sub) => {\n      let { fn, options } = sub;\n      if (options.delay) {\n        this.delay(name, fn, args, options);\n      } else {\n        if (options.debug) console.log('run: ' + name, args);\n        fn.apply(this, args);\n      }\n      return !sub.options.once;\n    });\n  }\n\n  private delay(name, fn, args, options) {\n    if (options._t) clearTimeout(options._t);\n    options._t = setTimeout(() => {\n      clearTimeout(options._t);\n      if (options.debug) console.log(`run-delay ${options.delay}:` + name, args);\n      fn.apply(this, args);\n    }, options.delay);\n  }\n}\n\nexport default new App();\n\n\n\n// WEBPACK FOOTER //\n// ./src/app.ts","export const Reflect = {\n\n  meta: new WeakMap(),\n\n  defineMetadata(metadataKey, metadataValue, target) {\n    if (!this.meta.has(target)) this.meta.set(target, {});\n    this.meta.get(target)[metadataKey] = metadataValue;\n  },\n\n  getMetadataKeys(target) {\n    target = Object.getPrototypeOf(target);\n    return this.meta.get(target) ? Object.keys(this.meta.get(target)) : [];\n  },\n\n  getMetadata(metadataKey, target) {\n    target = Object.getPrototypeOf(target);\n    return this.meta.get(target) ? this.meta.get(target)[metadataKey] : null;\n  }\n}\n\nexport function update(name?: string, options: any = {}) {\n  return (target: any, key: string, descriptor: any) => {\n    name = `${key}${name ? ',' + name : ''}`;\n    Reflect.defineMetadata(`apprun-update:${name}`,\n      { name, action: [descriptor.value, options] }, target);\n    return descriptor;\n  }\n}\n\nexport function on(name?: string, options: any = {}) {\n  return function (target: any, key: string) {\n    name = `${key}${name ? ',' + name : ''}`;    \n    Reflect.defineMetadata(`apprun-update:${name}`, { name, key }, target)\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/decorator.ts","import createComponent from './createComponent';\n\nexport type VNode = {\n  tag: string,\n  props: {},\n  children: Array<VNode | string>\n}\n\nexport type Element = any; //HTMLElement | SVGSVGElement | SVGElement;\n\nconst ATTR_PROPS = '_props';\n\nfunction collect(children) {\n  const ch = [];\n  const push = (c) => {\n    if (c !== null && c !== undefined && c !== '') {\n      ch.push((typeof c === 'function' || typeof c === 'object') ? c : `${c}`);\n    }\n  }\n  children && children.forEach(c => {\n    if (Array.isArray(c)) {\n      c.forEach(i => push(i));\n    } else {\n      push(c);\n    }\n  });\n  return ch;\n}\n\nexport function createElement (tag: string | Function, props: {}, ...children) {\n  const ch = collect(children);\n  if (typeof tag === 'string') return { tag, props, children: ch };\n  else if (tag === undefined && children) return ch; // JSX fragments\n  else if (Object.getPrototypeOf(tag).__isAppRunComponent) {\n    const id = props && props['id'] || `_${tag.name}_${++idx}`;\n    return createComponent(tag, id, props);\n  }\n  else\n    return tag(props, ch);\n};\n\nlet idx = 0;\nconst keyCache = {};\n\nexport const updateElement = render;\n\nexport function render(element: Element, node: VNode) {\n  // console.log('render', element, node);\n  idx = 0;\n\n  if (!node || !element) return;\n  if (!element.firstChild) {\n    element.appendChild(create(node));\n  } else {\n    update(element.firstChild, node);\n  }\n}\n\nfunction same(el: Element, node: VNode) {\n  // if (!el || !node) return false;\n  const key1 = el.nodeName;\n  const key2 = `${node.tag || ''}`;\n  return key1 === key2.toUpperCase();\n}\n\nfunction update(element: Element, node: VNode) {\n  console.assert(!!element);\n  //console.log('update', element, node);\n\n  if (!same(element, node)) {\n    element.parentNode.replaceChild(create(node), element);\n    return;\n  }\n\n  const len = Math.min(element.childNodes.length, node.children.length);\n  for (let i = 0; i < len; i++) {\n    const child = node.children[i];\n    const el = element.childNodes[i];\n    if (typeof child === 'string') {\n      if (el.textContent !== child) {\n        if (el.nodeType === 3) {\n          el.textContent = child\n        } else {\n          element.replaceChild(createText(child), el);\n        }\n      }\n    } else {\n      const key = child.props && child.props['key'];\n      if (key) {\n        if (el.key === key) {\n          update(element.childNodes[i], child);\n        } else {\n          const old = key && keyCache[key];\n          if (old) {\n            element.replaceChild(old, el);\n            element.appendChild(el);\n            update(element.childNodes[i], child);\n          } else {\n            element.appendChild(create(node), el);\n            update(element.childNodes[i], child);\n          }\n        }\n      } else {\n        update(element.childNodes[i], child);\n      }\n    }\n  }\n\n  let n = element.childNodes.length;\n  while (n > len) {\n    element.removeChild(element.lastChild);\n    n--;\n  }\n\n  if (node.children.length > len) {\n    const d = document.createDocumentFragment();\n    for (let i = len; i < node.children.length; i++) {\n      d.appendChild(create(node.children[i]));\n    }\n    element.appendChild(d);\n  }\n\n  updateProps(element, node.props);\n\n}\n\nfunction createText(node) {\n  if (node.indexOf('_html:') === 0) { // ?\n    const div = document.createElement('div');\n    div.insertAdjacentHTML('afterbegin', node.substring(6))\n    return div;\n  } else {\n    return document.createTextNode(node);\n  }\n}\n\nfunction create(node: VNode | string): Element {\n  console.assert(node !== null && node !== undefined);\n  // console.log('create', node, typeof node);\n\n  if (typeof node === \"string\") return createText(node);\n  if (!node.tag) return createText(JSON.stringify(node));\n\n  const element = (node.tag === \"svg\")\n    ? document.createElementNS(\"http://www.w3.org/2000/svg\", node.tag)\n    : document.createElement(node.tag);\n\n  updateProps(element, node.props);\n\n  if (node.children) node.children.forEach(child => element.appendChild(create(child)));\n\n  return element\n}\n\nfunction mergeProps(a: {}, b: {}): {} {\n  const props = {};\n  if (a) Object.keys(a).forEach(p => props[p] = '');\n  if (b) Object.keys(b).forEach(p => props[p] = b[p]);\n  return props;\n}\n\nfunction updateProps(element: Element, props: {}) {\n  console.assert(!!element);\n  // console.log('updateProps', element, props);\n\n  const cached = element[ATTR_PROPS] || {};\n  props = mergeProps(cached, props);\n  element[ATTR_PROPS] = props;\n  for (let name in props) {\n    const value = props[name];\n    if (cached[name] === value) continue;\n    // console.log('updateProps', name, value);\n    if (name === 'style') {\n      if (element.style.cssText) element.style.cssText = '';\n      for (let s in value) {\n        if (element.style[s] !== value[s]) element.style[s] = value[s];\n      }\n    } else {\n      if (element[name] !== value) element[name] = value;\n      if (name === 'key' && value) keyCache[value] = element;\n    }\n  }\n}\n\nexport function Fragment(props, ...children) {\n  return collect(children);\n}\n\n\n// WEBPACK FOOTER //\n// ./src/vdom-my.ts","import { createElement, updateElement } from './vdom-my';\nexport function render(element, html) {\n  console.assert(!!element);\n  updateElement(element, html);\n}\nexport { createElement };\n\n\n\n\n\n// WEBPACK FOOTER //\n// ./src/vdom.ts","import app from './app';\n\nconst cache = {}\n\nexport default function (componentClass, id, props) {\n  const component = cache[id] ? cache[id] :\n    (cache[id] = new componentClass(props).mount(id))\n  return <div id={id}>\n    {component.render && component.render()}\n  </div>\n}\n\n\n// WEBPACK FOOTER //\n// ./src/createComponent.tsx","\r\nimport app, { App } from './app';\r\nimport { Reflect } from './decorator'\r\nexport class Component {\r\n  static __isAppRunComponent = true;\r\n  private _app = new App();\r\n\r\n  element;\r\n  private _history = [];\r\n  private _history_idx = -1;\r\n  private enable_history;\r\n  private global_event;\r\n  protected rendered;\r\n\r\n  private renderState(state) {\r\n    if (!this.view) return;\r\n    const html = this.view(state);\r\n    const el = (typeof this.element === 'string') ?\r\n      document.getElementById(this.element) : this.element;\r\n    if (el) el['_component'] = this;\r\n    if (el && app.render) {\r\n      app.render(el, html);\r\n      if (this.rendered) (this.rendered(this.state));\r\n    }\r\n  }\r\n\r\n  public setState(state, options: {render:boolean, history:boolean, callback?}) {\r\n    if (state instanceof Promise) {\r\n      // Promise will not be saved nor rendered saved\r\n      // state will be saved and rendered when promise is resolved\r\n      state.then(s => {\r\n        this.setState(s, options)\r\n      }).catch(err => {\r\n        console.error(err);\r\n        throw err;\r\n      })\r\n    } else {\r\n      if (state == null) return;\r\n      this.state = state;\r\n      if (options.render !== false) this.renderState(state);\r\n      if (options.history !== false && this.enable_history) {\r\n        this._history = [...this._history, state];\r\n        this._history_idx = this._history.length - 1;\r\n      }\r\n      if (typeof options.callback === 'function') options.callback(this.state);\r\n    }\r\n  }\r\n\r\n  constructor(\r\n    protected state?,\r\n    protected view?,\r\n    protected update?,\r\n    protected options?) {\r\n  }\r\n\r\n  public mount(element = null, options?: { render?: boolean, history?, global_event?: boolean}) {\r\n\r\n    console.assert(!this.element, 'Component already mounted.')\r\n    this.options = options = Object.assign(this.options || {}, options);\r\n    this.element = element;\r\n    this.global_event = options.global_event;\r\n    this.enable_history = !!options.history;\r\n\r\n    if (this.enable_history) {\r\n      const prev = () => {\r\n        this._history_idx --;\r\n        if (this._history_idx >=0) {\r\n          this.setState(this._history[this._history_idx], { render: true, history: false });\r\n        }\r\n        else {\r\n          this._history_idx = 0;\r\n        }\r\n      };\r\n\r\n      const next = () => {\r\n        this._history_idx ++;\r\n        if (this._history_idx < this._history.length) {\r\n          this.setState(this._history[this._history_idx], { render: true, history: false });\r\n        }\r\n        else {\r\n          this._history_idx = this._history.length - 1;\r\n        }\r\n      };\r\n      this.on(options.history.prev || 'history-prev', prev)\r\n      this.on(options.history.next || 'history-next', next)\r\n    }\r\n    this.add_actions();\r\n    if (this.state === undefined) this.state = this['model'] || {};\r\n    if (options.render) {\r\n      this.setState(this.state, { render: true, history: true });\r\n    } else {\r\n      this.setState(this.state, { render: false, history: true });\r\n    }\r\n    return this;\r\n  }\r\n\r\n  is_global_event(name: string): boolean {\r\n    return name && (name.startsWith('#') || name.startsWith('/'));\r\n  }\r\n\r\n  add_action(name, action, options: any = {}) {\r\n    if (!action || typeof action !== 'function') return;\r\n    this.on(name, (...p) => {\r\n      const newState = action(this.state, ...p);\r\n        this.setState(newState, options)\r\n    }, options);\r\n  }\r\n\r\n  add_actions() {\r\n    const actions = this.update || {};\r\n    Reflect.getMetadataKeys(this).forEach(key => {\r\n      if (key.startsWith('apprun-update:')) {\r\n        const meta = Reflect.getMetadata(key, this)\r\n        actions[meta.name] = meta.action || this[meta.key]\r\n      }\r\n    })\r\n    const all = {};\r\n    Object.keys(actions).forEach(name => {\r\n      const action = actions[name];\r\n      if (typeof action === 'function' || Array.isArray(action)) {\r\n        name.split(',').forEach(n => all[n.trim()] = action)\r\n      }\r\n    })\r\n\r\n    Object.keys(all).forEach(name => {\r\n      const action = all[name];\r\n      if (typeof action === 'function') {\r\n        this.add_action(name, action);\r\n      } else if (Array.isArray(action)) {\r\n        this.add_action(name, action[0], action[1]);\r\n      }\r\n    });\r\n  }\r\n\r\n  start = (element = null,\r\n    options: { render?: boolean, history?, global_event?: boolean }= { render: true }): Component => {\r\n    return this.mount(element, { ...options, render: true });\r\n  }\r\n\r\n  render = () => this.view(this.state);\r\n\r\n  public run(name: string, ...args) {\r\n    return this.global_event || this.is_global_event(name) ?\r\n      app.run(name, ...args) :\r\n      this._app.run(name, ...args);\r\n  }\r\n\r\n  public on(name: string, fn: (...args) => void, options?: any) {\r\n    return this.global_event || this.is_global_event(name) ?\r\n      app.on(name, fn, options) :\r\n      this._app.on(name, fn, options);\r\n  }\r\n\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/component.ts","import app from './app';\n\nconst ROUTER_EVENT = '//';\n\nexport default class Router {\n\n  route(url: string) {\n    if (!url) url = '#';\n    if (url.indexOf('/') > 0) {\n      const [name, ...rest] = url.split('/');\n      app.run(name, ...rest);\n      app.run(ROUTER_EVENT, name, ...rest);\n    } else {\n      app.run(url);\n      app.run(ROUTER_EVENT, url);\n    }\n  }\n\n  constructor() {\n    app.on('route', hash => this.route(hash));\n    window.onpopstate = e => this.route(location.hash);\n    this.route(location.hash);\n  }\n}\n\n\n// WEBPACK FOOTER //\n// ./src/router.ts","import app, { Component } from './apprun'\nimport { createElement, render } from './vdom-html';\n\napp.createElement = createElement;\napp.render = render;\n\nexport default app;\nexport { Component };\n\n\n// WEBPACK FOOTER //\n// ./src/apprun-html.ts","import { createElement, updateElement } from './vdom-my';\nimport morph = require('morphdom')\n\nexport function render(element, html) {\n  console.assert(!!element);\n  if (typeof html === 'string') {\n    if (element.firstChild) {\n      morph(element.firstChild, html);\n    } else {\n      element.innerHTML = html;\n    }\n  } else {\n    updateElement(element, html);\n  }\n}\nexport { createElement };\n\n\n\n\n// WEBPACK FOOTER //\n// ./src/vdom-html.ts","'use strict';\n\nvar range; // Create a range object for efficently rendering strings to elements.\nvar NS_XHTML = 'http://www.w3.org/1999/xhtml';\n\nvar doc = typeof document === 'undefined' ? undefined : document;\n\nvar testEl = doc ?\n    doc.body || doc.createElement('div') :\n    {};\n\n// Fixes <https://github.com/patrick-steele-idem/morphdom/issues/32>\n// (IE7+ support) <=IE7 does not support el.hasAttribute(name)\nvar actualHasAttributeNS;\n\nif (testEl.hasAttributeNS) {\n    actualHasAttributeNS = function(el, namespaceURI, name) {\n        return el.hasAttributeNS(namespaceURI, name);\n    };\n} else if (testEl.hasAttribute) {\n    actualHasAttributeNS = function(el, namespaceURI, name) {\n        return el.hasAttribute(name);\n    };\n} else {\n    actualHasAttributeNS = function(el, namespaceURI, name) {\n        return el.getAttributeNode(namespaceURI, name) != null;\n    };\n}\n\nvar hasAttributeNS = actualHasAttributeNS;\n\n\nfunction toElement(str) {\n    if (!range && doc.createRange) {\n        range = doc.createRange();\n        range.selectNode(doc.body);\n    }\n\n    var fragment;\n    if (range && range.createContextualFragment) {\n        fragment = range.createContextualFragment(str);\n    } else {\n        fragment = doc.createElement('body');\n        fragment.innerHTML = str;\n    }\n    return fragment.childNodes[0];\n}\n\n/**\n * Returns true if two node's names are the same.\n *\n * NOTE: We don't bother checking `namespaceURI` because you will never find two HTML elements with the same\n *       nodeName and different namespace URIs.\n *\n * @param {Element} a\n * @param {Element} b The target element\n * @return {boolean}\n */\nfunction compareNodeNames(fromEl, toEl) {\n    var fromNodeName = fromEl.nodeName;\n    var toNodeName = toEl.nodeName;\n\n    if (fromNodeName === toNodeName) {\n        return true;\n    }\n\n    if (toEl.actualize &&\n        fromNodeName.charCodeAt(0) < 91 && /* from tag name is upper case */\n        toNodeName.charCodeAt(0) > 90 /* target tag name is lower case */) {\n        // If the target element is a virtual DOM node then we may need to normalize the tag name\n        // before comparing. Normal HTML elements that are in the \"http://www.w3.org/1999/xhtml\"\n        // are converted to upper case\n        return fromNodeName === toNodeName.toUpperCase();\n    } else {\n        return false;\n    }\n}\n\n/**\n * Create an element, optionally with a known namespace URI.\n *\n * @param {string} name the element name, e.g. 'div' or 'svg'\n * @param {string} [namespaceURI] the element's namespace URI, i.e. the value of\n * its `xmlns` attribute or its inferred namespace.\n *\n * @return {Element}\n */\nfunction createElementNS(name, namespaceURI) {\n    return !namespaceURI || namespaceURI === NS_XHTML ?\n        doc.createElement(name) :\n        doc.createElementNS(namespaceURI, name);\n}\n\n/**\n * Copies the children of one DOM element to another DOM element\n */\nfunction moveChildren(fromEl, toEl) {\n    var curChild = fromEl.firstChild;\n    while (curChild) {\n        var nextChild = curChild.nextSibling;\n        toEl.appendChild(curChild);\n        curChild = nextChild;\n    }\n    return toEl;\n}\n\nfunction morphAttrs(fromNode, toNode) {\n    var attrs = toNode.attributes;\n    var i;\n    var attr;\n    var attrName;\n    var attrNamespaceURI;\n    var attrValue;\n    var fromValue;\n\n    for (i = attrs.length - 1; i >= 0; --i) {\n        attr = attrs[i];\n        attrName = attr.name;\n        attrNamespaceURI = attr.namespaceURI;\n        attrValue = attr.value;\n\n        if (attrNamespaceURI) {\n            attrName = attr.localName || attrName;\n            fromValue = fromNode.getAttributeNS(attrNamespaceURI, attrName);\n\n            if (fromValue !== attrValue) {\n                fromNode.setAttributeNS(attrNamespaceURI, attrName, attrValue);\n            }\n        } else {\n            fromValue = fromNode.getAttribute(attrName);\n\n            if (fromValue !== attrValue) {\n                fromNode.setAttribute(attrName, attrValue);\n            }\n        }\n    }\n\n    // Remove any extra attributes found on the original DOM element that\n    // weren't found on the target element.\n    attrs = fromNode.attributes;\n\n    for (i = attrs.length - 1; i >= 0; --i) {\n        attr = attrs[i];\n        if (attr.specified !== false) {\n            attrName = attr.name;\n            attrNamespaceURI = attr.namespaceURI;\n\n            if (attrNamespaceURI) {\n                attrName = attr.localName || attrName;\n\n                if (!hasAttributeNS(toNode, attrNamespaceURI, attrName)) {\n                    fromNode.removeAttributeNS(attrNamespaceURI, attrName);\n                }\n            } else {\n                if (!hasAttributeNS(toNode, null, attrName)) {\n                    fromNode.removeAttribute(attrName);\n                }\n            }\n        }\n    }\n}\n\nfunction syncBooleanAttrProp(fromEl, toEl, name) {\n    if (fromEl[name] !== toEl[name]) {\n        fromEl[name] = toEl[name];\n        if (fromEl[name]) {\n            fromEl.setAttribute(name, '');\n        } else {\n            fromEl.removeAttribute(name, '');\n        }\n    }\n}\n\nvar specialElHandlers = {\n    /**\n     * Needed for IE. Apparently IE doesn't think that \"selected\" is an\n     * attribute when reading over the attributes using selectEl.attributes\n     */\n    OPTION: function(fromEl, toEl) {\n        syncBooleanAttrProp(fromEl, toEl, 'selected');\n    },\n    /**\n     * The \"value\" attribute is special for the <input> element since it sets\n     * the initial value. Changing the \"value\" attribute without changing the\n     * \"value\" property will have no effect since it is only used to the set the\n     * initial value.  Similar for the \"checked\" attribute, and \"disabled\".\n     */\n    INPUT: function(fromEl, toEl) {\n        syncBooleanAttrProp(fromEl, toEl, 'checked');\n        syncBooleanAttrProp(fromEl, toEl, 'disabled');\n\n        if (fromEl.value !== toEl.value) {\n            fromEl.value = toEl.value;\n        }\n\n        if (!hasAttributeNS(toEl, null, 'value')) {\n            fromEl.removeAttribute('value');\n        }\n    },\n\n    TEXTAREA: function(fromEl, toEl) {\n        var newValue = toEl.value;\n        if (fromEl.value !== newValue) {\n            fromEl.value = newValue;\n        }\n\n        var firstChild = fromEl.firstChild;\n        if (firstChild) {\n            // Needed for IE. Apparently IE sets the placeholder as the\n            // node value and vise versa. This ignores an empty update.\n            var oldValue = firstChild.nodeValue;\n\n            if (oldValue == newValue || (!newValue && oldValue == fromEl.placeholder)) {\n                return;\n            }\n\n            firstChild.nodeValue = newValue;\n        }\n    },\n    SELECT: function(fromEl, toEl) {\n        if (!hasAttributeNS(toEl, null, 'multiple')) {\n            var selectedIndex = -1;\n            var i = 0;\n            var curChild = toEl.firstChild;\n            while(curChild) {\n                var nodeName = curChild.nodeName;\n                if (nodeName && nodeName.toUpperCase() === 'OPTION') {\n                    if (hasAttributeNS(curChild, null, 'selected')) {\n                        selectedIndex = i;\n                        break;\n                    }\n                    i++;\n                }\n                curChild = curChild.nextSibling;\n            }\n\n            fromEl.selectedIndex = i;\n        }\n    }\n};\n\nvar ELEMENT_NODE = 1;\nvar TEXT_NODE = 3;\nvar COMMENT_NODE = 8;\n\nfunction noop() {}\n\nfunction defaultGetNodeKey(node) {\n    return node.id;\n}\n\nfunction morphdomFactory(morphAttrs) {\n\n    return function morphdom(fromNode, toNode, options) {\n        if (!options) {\n            options = {};\n        }\n\n        if (typeof toNode === 'string') {\n            if (fromNode.nodeName === '#document' || fromNode.nodeName === 'HTML') {\n                var toNodeHtml = toNode;\n                toNode = doc.createElement('html');\n                toNode.innerHTML = toNodeHtml;\n            } else {\n                toNode = toElement(toNode);\n            }\n        }\n\n        var getNodeKey = options.getNodeKey || defaultGetNodeKey;\n        var onBeforeNodeAdded = options.onBeforeNodeAdded || noop;\n        var onNodeAdded = options.onNodeAdded || noop;\n        var onBeforeElUpdated = options.onBeforeElUpdated || noop;\n        var onElUpdated = options.onElUpdated || noop;\n        var onBeforeNodeDiscarded = options.onBeforeNodeDiscarded || noop;\n        var onNodeDiscarded = options.onNodeDiscarded || noop;\n        var onBeforeElChildrenUpdated = options.onBeforeElChildrenUpdated || noop;\n        var childrenOnly = options.childrenOnly === true;\n\n        // This object is used as a lookup to quickly find all keyed elements in the original DOM tree.\n        var fromNodesLookup = {};\n        var keyedRemovalList;\n\n        function addKeyedRemoval(key) {\n            if (keyedRemovalList) {\n                keyedRemovalList.push(key);\n            } else {\n                keyedRemovalList = [key];\n            }\n        }\n\n        function walkDiscardedChildNodes(node, skipKeyedNodes) {\n            if (node.nodeType === ELEMENT_NODE) {\n                var curChild = node.firstChild;\n                while (curChild) {\n\n                    var key = undefined;\n\n                    if (skipKeyedNodes && (key = getNodeKey(curChild))) {\n                        // If we are skipping keyed nodes then we add the key\n                        // to a list so that it can be handled at the very end.\n                        addKeyedRemoval(key);\n                    } else {\n                        // Only report the node as discarded if it is not keyed. We do this because\n                        // at the end we loop through all keyed elements that were unmatched\n                        // and then discard them in one final pass.\n                        onNodeDiscarded(curChild);\n                        if (curChild.firstChild) {\n                            walkDiscardedChildNodes(curChild, skipKeyedNodes);\n                        }\n                    }\n\n                    curChild = curChild.nextSibling;\n                }\n            }\n        }\n\n        /**\n         * Removes a DOM node out of the original DOM\n         *\n         * @param  {Node} node The node to remove\n         * @param  {Node} parentNode The nodes parent\n         * @param  {Boolean} skipKeyedNodes If true then elements with keys will be skipped and not discarded.\n         * @return {undefined}\n         */\n        function removeNode(node, parentNode, skipKeyedNodes) {\n            if (onBeforeNodeDiscarded(node) === false) {\n                return;\n            }\n\n            if (parentNode) {\n                parentNode.removeChild(node);\n            }\n\n            onNodeDiscarded(node);\n            walkDiscardedChildNodes(node, skipKeyedNodes);\n        }\n\n        // // TreeWalker implementation is no faster, but keeping this around in case this changes in the future\n        // function indexTree(root) {\n        //     var treeWalker = document.createTreeWalker(\n        //         root,\n        //         NodeFilter.SHOW_ELEMENT);\n        //\n        //     var el;\n        //     while((el = treeWalker.nextNode())) {\n        //         var key = getNodeKey(el);\n        //         if (key) {\n        //             fromNodesLookup[key] = el;\n        //         }\n        //     }\n        // }\n\n        // // NodeIterator implementation is no faster, but keeping this around in case this changes in the future\n        //\n        // function indexTree(node) {\n        //     var nodeIterator = document.createNodeIterator(node, NodeFilter.SHOW_ELEMENT);\n        //     var el;\n        //     while((el = nodeIterator.nextNode())) {\n        //         var key = getNodeKey(el);\n        //         if (key) {\n        //             fromNodesLookup[key] = el;\n        //         }\n        //     }\n        // }\n\n        function indexTree(node) {\n            if (node.nodeType === ELEMENT_NODE) {\n                var curChild = node.firstChild;\n                while (curChild) {\n                    var key = getNodeKey(curChild);\n                    if (key) {\n                        fromNodesLookup[key] = curChild;\n                    }\n\n                    // Walk recursively\n                    indexTree(curChild);\n\n                    curChild = curChild.nextSibling;\n                }\n            }\n        }\n\n        indexTree(fromNode);\n\n        function handleNodeAdded(el) {\n            onNodeAdded(el);\n\n            var curChild = el.firstChild;\n            while (curChild) {\n                var nextSibling = curChild.nextSibling;\n\n                var key = getNodeKey(curChild);\n                if (key) {\n                    var unmatchedFromEl = fromNodesLookup[key];\n                    if (unmatchedFromEl && compareNodeNames(curChild, unmatchedFromEl)) {\n                        curChild.parentNode.replaceChild(unmatchedFromEl, curChild);\n                        morphEl(unmatchedFromEl, curChild);\n                    }\n                }\n\n                handleNodeAdded(curChild);\n                curChild = nextSibling;\n            }\n        }\n\n        function morphEl(fromEl, toEl, childrenOnly) {\n            var toElKey = getNodeKey(toEl);\n            var curFromNodeKey;\n\n            if (toElKey) {\n                // If an element with an ID is being morphed then it is will be in the final\n                // DOM so clear it out of the saved elements collection\n                delete fromNodesLookup[toElKey];\n            }\n\n            if (toNode.isSameNode && toNode.isSameNode(fromNode)) {\n                return;\n            }\n\n            if (!childrenOnly) {\n                if (onBeforeElUpdated(fromEl, toEl) === false) {\n                    return;\n                }\n\n                morphAttrs(fromEl, toEl);\n                onElUpdated(fromEl);\n\n                if (onBeforeElChildrenUpdated(fromEl, toEl) === false) {\n                    return;\n                }\n            }\n\n            if (fromEl.nodeName !== 'TEXTAREA') {\n                var curToNodeChild = toEl.firstChild;\n                var curFromNodeChild = fromEl.firstChild;\n                var curToNodeKey;\n\n                var fromNextSibling;\n                var toNextSibling;\n                var matchingFromEl;\n\n                outer: while (curToNodeChild) {\n                    toNextSibling = curToNodeChild.nextSibling;\n                    curToNodeKey = getNodeKey(curToNodeChild);\n\n                    while (curFromNodeChild) {\n                        fromNextSibling = curFromNodeChild.nextSibling;\n\n                        if (curToNodeChild.isSameNode && curToNodeChild.isSameNode(curFromNodeChild)) {\n                            curToNodeChild = toNextSibling;\n                            curFromNodeChild = fromNextSibling;\n                            continue outer;\n                        }\n\n                        curFromNodeKey = getNodeKey(curFromNodeChild);\n\n                        var curFromNodeType = curFromNodeChild.nodeType;\n\n                        var isCompatible = undefined;\n\n                        if (curFromNodeType === curToNodeChild.nodeType) {\n                            if (curFromNodeType === ELEMENT_NODE) {\n                                // Both nodes being compared are Element nodes\n\n                                if (curToNodeKey) {\n                                    // The target node has a key so we want to match it up with the correct element\n                                    // in the original DOM tree\n                                    if (curToNodeKey !== curFromNodeKey) {\n                                        // The current element in the original DOM tree does not have a matching key so\n                                        // let's check our lookup to see if there is a matching element in the original\n                                        // DOM tree\n                                        if ((matchingFromEl = fromNodesLookup[curToNodeKey])) {\n                                            if (curFromNodeChild.nextSibling === matchingFromEl) {\n                                                // Special case for single element removals. To avoid removing the original\n                                                // DOM node out of the tree (since that can break CSS transitions, etc.),\n                                                // we will instead discard the current node and wait until the next\n                                                // iteration to properly match up the keyed target element with its matching\n                                                // element in the original tree\n                                                isCompatible = false;\n                                            } else {\n                                                // We found a matching keyed element somewhere in the original DOM tree.\n                                                // Let's moving the original DOM node into the current position and morph\n                                                // it.\n\n                                                // NOTE: We use insertBefore instead of replaceChild because we want to go through\n                                                // the `removeNode()` function for the node that is being discarded so that\n                                                // all lifecycle hooks are correctly invoked\n                                                fromEl.insertBefore(matchingFromEl, curFromNodeChild);\n\n                                                fromNextSibling = curFromNodeChild.nextSibling;\n\n                                                if (curFromNodeKey) {\n                                                    // Since the node is keyed it might be matched up later so we defer\n                                                    // the actual removal to later\n                                                    addKeyedRemoval(curFromNodeKey);\n                                                } else {\n                                                    // NOTE: we skip nested keyed nodes from being removed since there is\n                                                    //       still a chance they will be matched up later\n                                                    removeNode(curFromNodeChild, fromEl, true /* skip keyed nodes */);\n                                                }\n\n                                                curFromNodeChild = matchingFromEl;\n                                            }\n                                        } else {\n                                            // The nodes are not compatible since the \"to\" node has a key and there\n                                            // is no matching keyed node in the source tree\n                                            isCompatible = false;\n                                        }\n                                    }\n                                } else if (curFromNodeKey) {\n                                    // The original has a key\n                                    isCompatible = false;\n                                }\n\n                                isCompatible = isCompatible !== false && compareNodeNames(curFromNodeChild, curToNodeChild);\n                                if (isCompatible) {\n                                    // We found compatible DOM elements so transform\n                                    // the current \"from\" node to match the current\n                                    // target DOM node.\n                                    morphEl(curFromNodeChild, curToNodeChild);\n                                }\n\n                            } else if (curFromNodeType === TEXT_NODE || curFromNodeType == COMMENT_NODE) {\n                                // Both nodes being compared are Text or Comment nodes\n                                isCompatible = true;\n                                // Simply update nodeValue on the original node to\n                                // change the text value\n                                if (curFromNodeChild.nodeValue !== curToNodeChild.nodeValue) {\n                                    curFromNodeChild.nodeValue = curToNodeChild.nodeValue;\n                                }\n\n                            }\n                        }\n\n                        if (isCompatible) {\n                            // Advance both the \"to\" child and the \"from\" child since we found a match\n                            curToNodeChild = toNextSibling;\n                            curFromNodeChild = fromNextSibling;\n                            continue outer;\n                        }\n\n                        // No compatible match so remove the old node from the DOM and continue trying to find a\n                        // match in the original DOM. However, we only do this if the from node is not keyed\n                        // since it is possible that a keyed node might match up with a node somewhere else in the\n                        // target tree and we don't want to discard it just yet since it still might find a\n                        // home in the final DOM tree. After everything is done we will remove any keyed nodes\n                        // that didn't find a home\n                        if (curFromNodeKey) {\n                            // Since the node is keyed it might be matched up later so we defer\n                            // the actual removal to later\n                            addKeyedRemoval(curFromNodeKey);\n                        } else {\n                            // NOTE: we skip nested keyed nodes from being removed since there is\n                            //       still a chance they will be matched up later\n                            removeNode(curFromNodeChild, fromEl, true /* skip keyed nodes */);\n                        }\n\n                        curFromNodeChild = fromNextSibling;\n                    }\n\n                    // If we got this far then we did not find a candidate match for\n                    // our \"to node\" and we exhausted all of the children \"from\"\n                    // nodes. Therefore, we will just append the current \"to\" node\n                    // to the end\n                    if (curToNodeKey && (matchingFromEl = fromNodesLookup[curToNodeKey]) && compareNodeNames(matchingFromEl, curToNodeChild)) {\n                        fromEl.appendChild(matchingFromEl);\n                        morphEl(matchingFromEl, curToNodeChild);\n                    } else {\n                        var onBeforeNodeAddedResult = onBeforeNodeAdded(curToNodeChild);\n                        if (onBeforeNodeAddedResult !== false) {\n                            if (onBeforeNodeAddedResult) {\n                                curToNodeChild = onBeforeNodeAddedResult;\n                            }\n\n                            if (curToNodeChild.actualize) {\n                                curToNodeChild = curToNodeChild.actualize(fromEl.ownerDocument || doc);\n                            }\n                            fromEl.appendChild(curToNodeChild);\n                            handleNodeAdded(curToNodeChild);\n                        }\n                    }\n\n                    curToNodeChild = toNextSibling;\n                    curFromNodeChild = fromNextSibling;\n                }\n\n                // We have processed all of the \"to nodes\". If curFromNodeChild is\n                // non-null then we still have some from nodes left over that need\n                // to be removed\n                while (curFromNodeChild) {\n                    fromNextSibling = curFromNodeChild.nextSibling;\n                    if ((curFromNodeKey = getNodeKey(curFromNodeChild))) {\n                        // Since the node is keyed it might be matched up later so we defer\n                        // the actual removal to later\n                        addKeyedRemoval(curFromNodeKey);\n                    } else {\n                        // NOTE: we skip nested keyed nodes from being removed since there is\n                        //       still a chance they will be matched up later\n                        removeNode(curFromNodeChild, fromEl, true /* skip keyed nodes */);\n                    }\n                    curFromNodeChild = fromNextSibling;\n                }\n            }\n\n            var specialElHandler = specialElHandlers[fromEl.nodeName];\n            if (specialElHandler) {\n                specialElHandler(fromEl, toEl);\n            }\n        } // END: morphEl(...)\n\n        var morphedNode = fromNode;\n        var morphedNodeType = morphedNode.nodeType;\n        var toNodeType = toNode.nodeType;\n\n        if (!childrenOnly) {\n            // Handle the case where we are given two DOM nodes that are not\n            // compatible (e.g. <div> --> <span> or <div> --> TEXT)\n            if (morphedNodeType === ELEMENT_NODE) {\n                if (toNodeType === ELEMENT_NODE) {\n                    if (!compareNodeNames(fromNode, toNode)) {\n                        onNodeDiscarded(fromNode);\n                        morphedNode = moveChildren(fromNode, createElementNS(toNode.nodeName, toNode.namespaceURI));\n                    }\n                } else {\n                    // Going from an element node to a text node\n                    morphedNode = toNode;\n                }\n            } else if (morphedNodeType === TEXT_NODE || morphedNodeType === COMMENT_NODE) { // Text or comment node\n                if (toNodeType === morphedNodeType) {\n                    if (morphedNode.nodeValue !== toNode.nodeValue) {\n                        morphedNode.nodeValue = toNode.nodeValue;\n                    }\n\n                    return morphedNode;\n                } else {\n                    // Text node to something else\n                    morphedNode = toNode;\n                }\n            }\n        }\n\n        if (morphedNode === toNode) {\n            // The \"to node\" was not compatible with the \"from node\" so we had to\n            // toss out the \"from node\" and use the \"to node\"\n            onNodeDiscarded(fromNode);\n        } else {\n            morphEl(morphedNode, toNode, childrenOnly);\n\n            // We now need to loop over any keyed nodes that might need to be\n            // removed. We only do the removal if we know that the keyed node\n            // never found a match. When a keyed node is matched up we remove\n            // it out of fromNodesLookup and we use fromNodesLookup to determine\n            // if a keyed node has been matched up or not\n            if (keyedRemovalList) {\n                for (var i=0, len=keyedRemovalList.length; i<len; i++) {\n                    var elToRemove = fromNodesLookup[keyedRemovalList[i]];\n                    if (elToRemove) {\n                        removeNode(elToRemove, elToRemove.parentNode, false);\n                    }\n                }\n            }\n        }\n\n        if (!childrenOnly && morphedNode !== fromNode && fromNode.parentNode) {\n            if (morphedNode.actualize) {\n                morphedNode = morphedNode.actualize(fromNode.ownerDocument || doc);\n            }\n            // If we had to swap out the from node with a new node because the old\n            // node was not compatible with the target node then we need to\n            // replace the old DOM node in the original DOM tree. This is only\n            // possible if the original DOM node was part of a DOM tree which\n            // we know is the case if it has a parent node.\n            fromNode.parentNode.replaceChild(morphedNode, fromNode);\n        }\n\n        return morphedNode;\n    };\n}\n\nvar morphdom = morphdomFactory(morphAttrs);\n\nmodule.exports = morphdom;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/morphdom/dist/morphdom.js\n// module id = 10\n// module chunks = 1"],"sourceRoot":""}